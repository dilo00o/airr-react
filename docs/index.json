[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/Airr.js",
    "content": "import View from \"./AirrView\";\nimport Scene from \"./AirrScene\";\nimport Mayer from \"./AirrMayer\";\nimport Sidepanel from \"./AirrSidepanel\";\nimport SceneWrapper from \"./AirrSceneWrapper\";\nimport ViewWrapper from \"./AirrViewWrapper\";\nimport FX from \"./AirrFX\";\nimport { supportPassive, isMobileDevice } from \"./eventHelpers\";\n\nexport const Helpers = { supportPassive, isMobileDevice };\nexport {\n    View,\n    Scene,\n    Mayer,\n    Sidepanel,\n    SceneWrapper,\n    ViewWrapper,\n    FX\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/Airr.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Helpers",
    "memberof": "lib/Airr.js",
    "static": true,
    "longname": "lib/Airr.js~Helpers",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/Airr.js",
    "importStyle": "{Helpers}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"supportPassive\": *, \"isMobileDevice\": *}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "lib/AirrFX.js",
    "content": "/**\n * Animation utiliy class. Performs css based transition animations\n */\nexport default function AirrFX() {}\n\n/**\n * Animate passed HTML element with power of css transitions\n * \n * @param {HTMLElement} element\n * @param {object} startProps css properties that will be set prior the animation\n * @param {array} transitionProps array of css transition definitions, e.g. ['opacity 700ms ease-in', 'transform .4s ease-out']. Compatibility props like `-webkit-transform` are not needed as they will be added automatically\n * @param {object} endProps target css properties values that animation will go to\n * @param {function} preAnimationCallback callback to call before animation begins\n * @param {integer} endAfter time in miliseconds after which `endCallback` will be invoke\n * @param {function} endCallback function to call after endAfter time parameter is gone\n * @returns {void}\n */\nAirrFX.doTransitionAnimation = function(\n    element,\n    startProps,\n    transitionProps,\n    endProps,\n    preAnimationCallback,\n    endAfter,\n    endCallback\n) {\n    element.style.webkitTransition = \"none\";\n    element.style.transition = \"none\";\n    // eslint-disable-next-line\n    element.offsetHeight;\n\n    element.style.webkitBackfaceVisibility = \"hidden\";\n    element.style.backfaceVisibility = \"hidden\";\n    for (let prop in startProps) {\n        if (prop === \"transform\") {\n            element.style.webkitTransform = startProps[prop];\n        }\n        element.style[prop] = startProps[prop];\n    }\n    let compatibilityString = null;\n    let transitionString = transitionProps.join(\",\");\n\n    if (\n        transitionString.indexOf(\"transform\") !== -1 &&\n        transitionString.indexOf(\"-webkit-transform\") === -1\n    ) {\n        compatibilityString = transitionString.replace(\n            \"transform\",\n            \"-webkit-transform\"\n        );\n    }\n\n    if (typeof preAnimationCallback === \"function\") {\n        preAnimationCallback();\n    }\n\n    // eslint-disable-next-line\n    element.offsetHeight;\n\n    if (compatibilityString) {\n        element.style.webkitTransition = compatibilityString;\n    }\n    element.style.webkitTransition = transitionString;\n    if (compatibilityString) {\n        element.style.transition = compatibilityString;\n    }\n    element.style.transition = transitionString;\n\n    // eslint-disable-next-line\n    element.offsetHeight;\n\n    for (let prop in endProps) {\n        if (prop === \"transform\") {\n            element.style.webkitTransform = endProps[prop];\n        }\n        element.style[prop] = endProps[prop];\n    }\n\n    if (typeof endCallback === \"function\") {\n        setTimeout(function() {\n            endCallback();\n        }, endAfter);\n    }\n};\n\n/**\n * Used by Mayers for leaving animation\n * \n * @param {HTMLElement} dom\n * @param {int} width\n * @param {int} height\n * @param {int} t time in miliseconds\n * @param {string} headTo top,bottom,left,right\n * @param {function} callback\n * @returns {void}\n */\nAirrFX.doOverlayOutAnimation = function(\n    dom,\n    width,\n    height,\n    t,\n    headTo,\n    callback\n) {\n    let startProps = { opacity: 1 };\n    let endProps = { zIndex: 102, opacity: 0 };\n\n    if ([\"top\", \"bottom\"].indexOf(headTo) !== -1) {\n        if (headTo === \"top\") {\n            endProps.webkitTransform =\n                \"scale(0, 1) translate3d(0,-\" + height + \"px,0)\";\n            endProps.transform =\n                \"scale(0, 1) translate3d(0,-\" + height + \"px,0)\";\n        } else {\n            endProps.webkitTransform =\n                \"scale(0, 1) translate3d(0,\" + height + \"px,0)\";\n            endProps.transform =\n                \"scale(0, 1) translate3d(0,\" + height + \"px,0)\";\n        }\n    } else {\n        if (headTo === \"left\") {\n            endProps.webkitTransform =\n                \"scale(1, 0) translate3d(-\" + width + \"px,0,0)\";\n            endProps.transform =\n                \"scale(1, 0) translate3d(-\" + width + \"px,0,0)\";\n        } else {\n            endProps.webkitTransform =\n                \"scale(1, 0) translate3d(\" + width + \"px,0,0)\";\n            endProps.transform = \"scale(1, 0) translate3d(\" + width + \"px,0,0)\";\n        }\n    }\n\n    AirrFX.doTransitionAnimation(\n        dom,\n        startProps,\n        [`opacity ${t}ms ease-out`, `transform ${t}ms ease-out`],\n        endProps,\n        null,\n        t,\n        () => {\n            dom.style.cssText = \"\";\n\n            if (typeof callback === \"function\") {\n                callback();\n            }\n        }\n    );\n};\n\n/**\n * Used by Mayers for entering animation\n * \n * @param {HTMLElement} dom\n * @param {int} width\n * @param {int} height\n * @param {int} t time in miliseconds\n * @param {string} appearFrom top,bottom,left,right direction from which element will appear on the screen\n * @param {function} callback\n * @returns {void}\n */\nAirrFX.doOverlayInAnimation = function(\n    dom,\n    width,\n    height,\n    t,\n    appearFrom,\n    callback\n) {\n    let startProps = { opacity: 0 };\n\n    if ([\"top\", \"bottom\"].indexOf(appearFrom) !== -1) {\n        if (appearFrom === \"bottom\") {\n            startProps.webkitTransform =\n                \"scale(0, 1) translate3d(0,\" + height + \"px,0)\";\n            startProps.transform =\n                \"scale(0, 1) translate3d(0,\" + height + \"px,0)\";\n        } else {\n            startProps.webkitTransform =\n                \"scale(0, 1) translate3d(0,\" + -1 * height + \"px,0)\";\n            startProps.transform =\n                \"scale(0, 1) translate3d(0,\" + -1 * height + \"px,0)\";\n        }\n    } else {\n        if (appearFrom === \"right\") {\n            startProps.webkitTransform =\n                \"scale(1, 0) translate3d(\" + width + \"px,0,0)\";\n            startProps.transform =\n                \"scale(1, 0) translate3d(\" + width + \"px,0,0)\";\n        } else {\n            startProps.webkitTransform =\n                \"scale(1, 0) translate3d(\" + -1 * width + \"px,0,0)\";\n            startProps.transform =\n                \"scale(1, 0) translate3d(\" + -1 * width + \"px,0,0)\";\n        }\n    }\n\n    AirrFX.doTransitionAnimation(\n        dom,\n        startProps,\n        [`opacity ${t}ms ease-out`, `transform ${t}ms ease-out`],\n        {\n            zIndex: 102,\n            webkitTransform: \"scale(1, 1) translate3d(0,0,0)\",\n            transform: \"scale(1, 1) translate3d(0,0,0)\",\n            opacity: 1\n        },\n        null,\n        t,\n        () => {\n            dom.style.cssText = \"\";\n\n            if (typeof callback === \"function\") {\n                callback();\n            }\n        }\n    );\n};\n\n/**\n * Used for animating scroll in vertical axis\n * \n * @param {HTMLElement} element\n * @param {int} scrollDuration time in miliseconds\n * @param {string} direction top or bottom\n * @returns {void}\n */\nAirrFX.doVerticalScrollAnimation = function(\n    element,\n    scrollDuration,\n    direction\n) {\n    if ([\"top\", \"bottom\"].indexOf(direction) === -1) {\n        throw new Error(\"Invalid direction parameter speciefied\");\n    }\n\n    let scrollHeight = element.scrollHeight,\n        scrollStep = Math.PI / (scrollDuration / 15),\n        cosParameter = scrollHeight / 2,\n        scrollCount = 0,\n        scrollMargin,\n        scrollEnd =\n            direction === \"top\"\n                ? 0\n                : scrollHeight - element.parentNode.clientHeight;\n    let scrollInterval = setInterval(() => {\n        if (element.scrollTop !== scrollEnd) {\n            scrollCount += 1;\n            scrollMargin =\n                cosParameter -\n                cosParameter * Math.cos(scrollCount * scrollStep);\n\n            if (direction === \"top\") {\n                element.scrollTop = element.scrollTop - scrollMargin;\n            } else {\n                element.scrollTop = element.scrollTop + scrollMargin;\n            }\n        } else {\n            clearInterval(scrollInterval);\n        }\n    }, 15);\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/AirrFX.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "AirrFX",
    "memberof": "lib/AirrFX.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/AirrFX.js~AirrFX",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/AirrFX.js",
    "importStyle": "AirrFX",
    "description": "Animation utiliy class. Performs css based transition animations",
    "lineNumber": 4,
    "params": [],
    "return": null
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "doTransitionAnimation",
    "memberof": "lib/AirrFX.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/AirrFX.js~doTransitionAnimation",
    "access": "public",
    "export": false,
    "importPath": "airr-react/lib/AirrFX.js",
    "importStyle": null,
    "description": "Animate passed HTML element with power of css transitions",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "startProps",
        "description": "css properties that will be set prior the animation"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "transitionProps",
        "description": "array of css transition definitions, e.g. ['opacity 700ms ease-in', 'transform .4s ease-out']. Compatibility props like `-webkit-transform` are not needed as they will be added automatically"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "endProps",
        "description": "target css properties values that animation will go to"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "preAnimationCallback",
        "description": "callback to call before animation begins"
      },
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "endAfter",
        "description": "time in miliseconds after which `endCallback` will be invoke"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "endCallback",
        "description": "function to call after endAfter time parameter is gone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "doOverlayOutAnimation",
    "memberof": "lib/AirrFX.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/AirrFX.js~doOverlayOutAnimation",
    "access": "public",
    "export": false,
    "importPath": "airr-react/lib/AirrFX.js",
    "importStyle": null,
    "description": "Used by Mayers for leaving animation",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "dom",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "time in miliseconds"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "headTo",
        "description": "top,bottom,left,right"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "doOverlayInAnimation",
    "memberof": "lib/AirrFX.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/AirrFX.js~doOverlayInAnimation",
    "access": "public",
    "export": false,
    "importPath": "airr-react/lib/AirrFX.js",
    "importStyle": null,
    "description": "Used by Mayers for entering animation",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "dom",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "time in miliseconds"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "appearFrom",
        "description": "top,bottom,left,right direction from which element will appear on the screen"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "doVerticalScrollAnimation",
    "memberof": "lib/AirrFX.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/AirrFX.js~doVerticalScrollAnimation",
    "access": "public",
    "export": false,
    "importPath": "airr-react/lib/AirrFX.js",
    "importStyle": null,
    "description": "Used for animating scroll in vertical axis",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "scrollDuration",
        "description": "time in miliseconds"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "top or bottom"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "lib/AirrMayer.js",
    "content": "import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport AirrFX from \"./AirrFX\";\n\nexport default class AirrMayer extends Component {\n    /**\n     * Mayer's HTML DOM Element refferency\n     */\n    refDOMMayer = React.createRef();\n    /**\n     * Mayer's container's HTML DOM Element refferency\n     */\n    refDOMCtn = React.createRef();\n\n    constructor(props) {\n        super(props);\n        if (!props.name) {\n            throw new Error(\"Every Mayer must has its `name` property set\");\n        }\n    }\n    /**\n     * Private utility method for rendering buttons based upon passed config object\n     * @param {object} config\n     * @param {int} index\n     * @returns {ReactElement}\n     */\n    __renderButton(config, index) {\n        let className = \"btn text\";\n        if (config.className) {\n            className += \" \" + config.className;\n        }\n\n        let spareAttribs = {};\n        if (config.attrs) {\n            spareAttribs = config.attrs;\n        }\n\n        return (\n            <button\n                key={\"btn\" + index}\n                className={className}\n                style={config.style || null}\n                onClick={config.handler || null}\n                {...spareAttribs}\n            >\n                {config.content}\n            </button>\n        );\n    }\n\n    componentDidMount() {\n        if (this.refDOMCtn.current.clientHeight >= this.props.avaibleHeight) {\n            this.refDOMCtn.current.style.height =\n                this.props.avaibleHeight + \"px\";\n            this.refDOMMayer.current.classList.add(\"full\");\n        }\n\n        this.animateIn();\n    }\n\n    /**\n     * Animates Mayers html dom element into the screen\n     */\n    animateIn() {\n        AirrFX.doTransitionAnimation(\n            this.refDOMMayer.current.querySelector(\".bg\"),\n            { opacity: 0 },\n            [\"opacity \" + this.props.animationTime + \"ms ease-out\"],\n            { opacity: 1 }\n        );\n        AirrFX.doOverlayInAnimation(\n            this.refDOMCtn.current,\n            this.refDOMMayer.current.clientWidth,\n            this.refDOMMayer.current.clientHeight,\n            this.props.animationTime,\n            this.props.appearFrom\n        );\n    }\n\n    /**\n     * Animates Mayers html dom element out of the screen\n     * @param {function} callback Called after animation end\n     */\n    animateOut(callback) {\n        AirrFX.doTransitionAnimation(\n            this.refDOMMayer.current.querySelector(\".bg\"),\n            { opacity: 1 },\n            [\"opacity \" + this.props.animationTime + \"ms ease-out\"],\n            { opacity: 0 }\n        );\n        AirrFX.doOverlayOutAnimation(\n            this.refDOMCtn.current,\n            this.refDOMMayer.current.clientHeight,\n            this.refDOMMayer.current.clientWidth,\n            this.props.animationTime,\n            this.props.leaveTo,\n            callback\n        );\n    }\n\n    render() {\n        let buttons = [];\n        if (this.props.buttons) {\n            this.props.buttons.forEach((config, index) => {\n                buttons.push(this.__renderButton(config, index));\n            });\n        }\n\n        return (\n            <div\n                className=\"airr-mayer\"\n                ref={this.refDOMMayer}\n                style={this.props.style}\n            >\n                <div className=\"bg\" />\n                <div className=\"ctn\" ref={this.refDOMCtn}>\n                    <div className=\"text\">\n                        {this.props.children}\n                        {this.props.content}\n                    </div>\n                    <div className=\"btns\">{buttons}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAirrMayer.propTypes = {\n    /**\n     * The name of the mayer. Must be unique among others mayers in scene. Will be used as identification.\n     */\n    name: PropTypes.string.isRequired,\n    /**\n     * Extra styles to apply on Mayer's DOM element\n     */\n    style: PropTypes.object,\n    /**\n     * Parent scene height. Set by parent scene itseld. Do not overwrite!\n     */\n    avaibleHeight: PropTypes.number.isRequired,\n    /**\n     * Side from which mayer content box will enter\n     */\n    appearFrom: PropTypes.oneOf([\"top\", \"bottom\", \"left\", \"right\"]),\n    /**\n     * Side to which mayer content box will leave\n     */\n    leaveTo: PropTypes.oneOf([\"top\", \"bottom\", \"left\", \"right\"]),\n    /**\n     * Content of mayer\n     */\n\n    content: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * Array with buttons configuration\n     */\n    buttons: PropTypes.arrayOf(\n        PropTypes.shape({\n            /**\n             * Extra class names to use upon button\n             */\n            className: PropTypes.string,\n            /**\n             * Extra attributes to apply on HTML element\n             */\n            attrs: PropTypes.object,\n            /**\n             * Additional inline styles\n             */\n            style: PropTypes.object,\n            /**\n             * OnClick function handler\n             */\n            handler: PropTypes.func,\n            /**\n             * Content to render inside Mayer. Might be string or ReactElement.\n             */\n            content: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n        })\n    ),\n    /**\n     * Time in miliseconds of mayer's appear/disappear animation\n     */\n    animationTime: PropTypes.number\n};\nAirrMayer.defaultProps = {\n    name: \"\",\n    style: null,\n    avaibleHeight: null,\n    appearFrom: \"bottom\",\n    leaveTo: \"bottom\",\n    content: null,\n    buttons: [],\n    animationTime: 300\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/AirrMayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "AirrMayer",
    "memberof": "lib/AirrMayer.js",
    "static": true,
    "longname": "lib/AirrMayer.js~AirrMayer",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/AirrMayer.js",
    "importStyle": "AirrMayer",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "refDOMMayer",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#refDOMMayer",
    "access": "public",
    "description": "Mayer's HTML DOM Element refferency",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "refDOMCtn",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#refDOMCtn",
    "access": "public",
    "description": "Mayer's container's HTML DOM Element refferency",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "__renderButton",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#__renderButton",
    "access": "private",
    "description": "Private utility method for rendering buttons based upon passed config object",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReactElement}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactElement"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "animateIn",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#animateIn",
    "access": "public",
    "description": "Animates Mayers html dom element into the screen",
    "lineNumber": 64,
    "params": [],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "animateOut",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#animateOut",
    "access": "public",
    "description": "Animates Mayers html dom element out of the screen",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called after animation end"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "render",
    "memberof": "lib/AirrMayer.js~AirrMayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrMayer.js~AirrMayer#render",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "lib/AirrScene.js",
    "content": "import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport AirrMayer from \"./AirrMayer\";\n\nexport default class AirrScene extends Component {\n    /**\n     * Mayers Components refferencies\n     */\n    mayersCompsRefs = {};\n\n    /**\n     * Returns view index from this.props.views array\n     *\n     * @param {string} viewName\n     * @returns {Number}\n     */\n    getViewIndex(viewName) {\n        let index = -1;\n\n        this.props.views.forEach((config, i) => {\n            if (config.props.name === viewName) {\n                index = i;\n            }\n        });\n\n        return index;\n    }\n\n    /**\n     * Handles navbar backbutton tap events\n     *\n     * @param {object} e Event object\n     * @returns {void}\n     */\n    handleBackButton = e => {\n        const backBtn = e.currentTarget;\n        backBtn.classList.add(\"clicked\");\n\n        setTimeout(() => {\n            backBtn.classList.remove(\"clicked\");\n        }, 300);\n\n        if (\n            this.getViewIndex(this.props.activeViewName) === 0 &&\n            this.props.handleBackBehaviourOnFirstView\n        ) {\n            return this.props.handleBackBehaviourOnFirstView();\n        }\n\n        if (this.props.handleBackButton) {\n            this.props.handleBackButton(e);\n        } else {\n            console.warn(\"[Airr] Back button handler was not specified.\");\n        }\n    };\n\n    /**\n     * Handles navbar menu button tap events\n     *\n     * @param {object} e Event object\n     * @returns {void}\n     */\n    handleMenuButtonToggleSidepanel = e => {\n        if (\n            this.props.refCOMPSidepanel &&\n            this.props.refCOMPSidepanel.current\n        ) {\n            this.props.refCOMPSidepanel.current.isShown()\n                ? this.props.refCOMPSidepanel.current.hide()\n                : this.props.refCOMPSidepanel.current.show();\n        }\n    };\n\n    render() {\n        const containerClassList = [\"airr-container\"];\n        if (this.props.animation) {\n            containerClassList.push(this.props.animation + \"-animation\");\n        }\n\n        let className = \"airr-view airr-scene\";\n        this.props.active && (className += \" active\");\n        this.props.className && (className += \" \" + this.props.className);\n\n        let views = [];\n        let isAnyViewActive = false;\n        this.props.views.forEach(item => {\n            let viewProps = Object.assign({}, item.props);\n\n            if (viewProps.name === this.props.activeViewName) {\n                viewProps.active = true;\n                isAnyViewActive = true;\n            }\n\n            views.push(React.createElement(item.type, viewProps));\n        });\n\n        if (!isAnyViewActive) {\n            console.warn(\n                \"[Airr] No view was set as active\" +\n                    (this.props.name && \" in Scene named `\" + this.props.name) +\n                    \".\"\n            );\n        }\n\n        let sidepanel = null;\n        if (this.props.sidepanel) {\n            sidepanel = React.createElement(\n                this.props.sidepanel.type,\n                this.props.sidepanel.props\n            );\n        }\n\n        let blankmask = null;\n        if (this.props.GUIDisabled) {\n            blankmask = (\n                <div className=\"airr-blank-mask\">\n                    {this.props.GUIDisableCover}\n                </div>\n            );\n        }\n\n        let mayers = [];\n        if (this.props.mayers.length) {\n            mayers = this.props.mayers.map(mayerProps => {\n                mayerProps.key = mayerProps.name;\n                return React.createElement(AirrMayer, mayerProps);\n            });\n        }\n\n        let navbar = null;\n        if (this.props.navbar) {\n            let mockTitle = null;\n            let title = \"\";\n            let back = null;\n            const activeViewIndex = this.getViewIndex(\n                this.props.activeViewName\n            );\n\n            if (this.props.backButton) {\n                const backClassName =\n                    \"back \" +\n                    (activeViewIndex < 1 && !this.props.backButtonOnFirstView\n                        ? \"hidden\"\n                        : \"\");\n                back = (\n                    <div\n                        className={backClassName}\n                        onClick={this.handleBackButton}\n                    >\n                        <div />\n                    </div>\n                );\n            }\n\n            let menu;\n            if (this.props.navbarMenu) {\n                if (this.props.navbarMenu === \"toggleSidepanel\") {\n                    menu = this.props.sidepanel ? (\n                        <div\n                            className=\"menu\"\n                            onClick={this.handleMenuButtonToggleSidepanel}\n                        >\n                            <div />\n                        </div>\n                    ) : null;\n                } else if (Array.isArray(this.props.navbarMenu)) {\n                    menu = <div className=\"menu\">{this.props.navbarMenu}</div>;\n                }\n            }\n\n            const navbarStyle = {};\n            if ([1, true].indexOf(this.props.navbar) === -1) {\n                navbarStyle.visibility = \"hidden\";\n            }\n\n            if (this.props.mockTitle) {\n                const mockTitleContent =\n                    this.props.views[activeViewIndex] &&\n                    this.props.views[activeViewIndex].props.title;\n                const mockTitleViewIndex = this.getViewIndex(\n                    this.props.mockTitle\n                );\n                mockTitle = this.props.mockTitle ? (\n                    <div className=\"mock-title\">\n                        <span>{mockTitleContent}</span>\n                    </div>\n                ) : null;\n                title = this.props.views[mockTitleViewIndex]\n                    ? this.props.views[mockTitleViewIndex].props.title\n                    : \"\";\n            } else {\n                title = this.props.views[activeViewIndex]\n                    ? this.props.views[activeViewIndex].props.title\n                    : \"\";\n            }\n\n            navbar = (\n                <div\n                    className=\"airr-navbar\"\n                    ref={this.props.refDOMNavbar}\n                    style={navbarStyle}\n                >\n                    <div\n                        className={this.props.navbarClass}\n                        style={{ height: this.props.navbarHeight + \"px\" }}\n                    >\n                        {mockTitle}\n                        {back}\n                        <div\n                            className=\"title\"\n                            style={{ opacity: this.props.mockTitle ? 0 : 1 }}\n                        >\n                            <span>{title}</span>\n                        </div>\n                        {menu}\n                    </div>\n                </div>\n            );\n        }\n\n        const children =\n            typeof this.props.children === \"function\"\n                ? this.props.children(this.props)\n                : this.props.children;\n\n        return (\n            <div className={className} ref={this.props.refDOM}>\n                {navbar}\n                <div\n                    className={containerClassList.join(\" \")}\n                    ref={this.props.refDOMContainer}\n                >\n                    {views}\n                </div>\n                {children}\n                {sidepanel}\n                {mayers}\n                {blankmask}\n            </div>\n        );\n    }\n}\n\nAirrScene.defaultProps = {\n    name: \"\",\n\n    activeViewName: null,\n    GUIDisabled: false,\n    GUIDisableCover: null,\n    animation: \"slide\",\n    animationTime: 300,\n    navbar: false,\n    navbarHeight: 48,\n    navbarMenu: null,\n    navbarClass: \"\",\n    backButton: false,\n    backButtonOnFirstView: false,\n    handleBackButton: null,\n    handleBackBehaviourOnFirstView: null,\n    viewsAnimationEndCallback: null,\n    active: false,\n    sidepanel: null,\n    views: [],\n    mayers: [],\n    title: \"\",\n    className: \"\"\n};\n\nAirrScene.propTypes = {\n    /**\n     * The name of the scene. Must be unique among others views in parent scene. Will be used as identification string\n     */\n    name: PropTypes.string.isRequired,\n    /**\n     * Name of the active view.\n     */\n    activeViewName: PropTypes.string,\n    /**\n     * Boolean telling if GUI should be disabled meaning no user actions, events are allowed.\n     * GUI is disabled via absolute positioned, not visible div that has the biggest z-Index\n     */\n    GUIDisabled: PropTypes.bool,\n    /**\n     * React element to be placed in GUI disabling div\n     */\n    GUIDisableCover: PropTypes.object,\n    /**\n     * Type of animation to perform when switching views\n     */\n    animation: PropTypes.oneOf([\"slide\", \"overlay\", \"fade\", false]),\n    /**\n     * Time of views changing animatio\n     */\n    animationTime: PropTypes.number,\n    /**\n     * Specify if navbar is present (1,true) or not (0,false). Or maybe hidden (-1)\n     */\n    navbar: PropTypes.oneOf([-1, 0, false, 1, true]),\n    /**\n     * Height of the navbar in pixels\n     */\n    navbarHeight: PropTypes.number,\n    /**\n     * Navbar menu is placed on the right most side. Might contain \"toggleSidepanel\" button or any custom buttons list.\n     */\n    navbarMenu: function(props, propName, componentName) {\n        if (props[propName]) {\n            if (typeof props[propName] === \"string\") {\n                if (!/toggleSidepanel/.test(props[propName])) {\n                    return new Error(\n                        \"Invalid prop `\" +\n                            propName +\n                            \"` supplied to\" +\n                            \" `\" +\n                            componentName +\n                            \"`. Value must be `toggleSidepanel` string or array of React elements.\"\n                    );\n                } else {\n                    return null;\n                }\n            }\n\n            if (!Array.isArray(props[propName])) {\n                return new Error(\n                    \"Invalid prop `\" +\n                        propName +\n                        \"` supplied to\" +\n                        \" `\" +\n                        componentName +\n                        \"`. Value must be `toggleSidepanel` string or array of React elements.\"\n                );\n            }\n        }\n    },\n    /**\n     * Extra, space separated, navbar's class names list\n     */\n    navbarClass: PropTypes.string,\n    /**\n     * Boolean specifing if navbar renders BackButton. Placed by default on the left side of navbar.\n     */\n    backButton: PropTypes.bool,\n    /**\n     * Do you need to still show backButton even if scene is rendering first view from stack?\n     */\n    backButtonOnFirstView: PropTypes.bool,\n    /**\n     * Function that will handle back button click events\n     */\n    handleBackButton: PropTypes.func,\n    /**\n     * Function that will handle back button clicks events on when first view in stack is active\n     */\n    handleBackBehaviourOnFirstView: PropTypes.func,\n    /**\n     * Callback that will be invoked when views animation finishes\n     */\n    viewsAnimationEndCallback: PropTypes.func,\n    /**\n     * Is this view active in parent scene\n     */\n    active: PropTypes.bool,\n    /**\n     * Sidepanels declaration. Must contain two properties: `type` and `props`\n     **/\n    sidepanel: PropTypes.shape({\n        /**\n         * Refference to class or function that will render AirrSidepanel. Might be AirrSidepanel itself.\n         */\n        type: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n            .isRequired,\n        /**\n         * Special properties of AirrSidepanel class. Go to class declaration for further properties documenation.\n         */\n        props: PropTypes.shape({\n            /**\n             * Side to which sidepanel will be attached\n             */\n            side: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]),\n            /**\n             * Bool determining if sidepanel is shown or not\n             */\n            isShown: PropTypes.bool,\n            /**\n             * Bool determining if sidepanel is enabled, another words, if its can be drag out\n             */\n            enabled: PropTypes.bool,\n            /**\n             * Number between 0 and 1 determining how much size of whole screen sidepanel will take\n             */\n            sizeFactor: PropTypes.number,\n            /**\n             * Parent scene width dimension. Passed by scene itself.\n             */\n            sceneWidth: PropTypes.number.isRequired,\n            /**\n             * Parent scene height dimension. Passed by scene itself.\n             */\n            sceneHeight: PropTypes.number.isRequired,\n            /**\n             * Do you want to animate sidepanel showing in/out\n             */\n            animateShown: PropTypes.bool,\n            /**\n             * Callback called when sidepanel changes its visibility during touch events. Passed by scene itself.\n             */\n            visibilityCallback: PropTypes.func,\n            /**\n             * Animation time in miliseconds\n             */\n            animationTime: PropTypes.number,\n            /**\n             * Opacity between 0 and 1\n             */\n            bgLayerOpacity: PropTypes.number\n        })\n    }),\n    /**\n     * Array of `views`. Every view object declaration must contain two properties: `type` and `props`.\n     */\n    views: PropTypes.arrayOf(\n        PropTypes.shape({\n            /**\n             * Refference to class or function that will render AirrView. The most common and adviced approach is to use AirrViewWrapper.\n             */\n            type: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n                .isRequired,\n            /**\n             * Special properties of AirrView class. Go to class declaration for further properties documenation.\n             */\n            props: PropTypes.shape({\n                /**\n                 * The name of the view. Must be unique among others views in scene. Will be used as identification string\n                 */\n                name: PropTypes.string.isRequired,\n                /**\n                 * Titlebar name. if parent scene navbar is enabled, this title will be showed there\n                 */\n                title: PropTypes.string,\n                /**\n                 * Determine if this view is active. Set by parent scene.\n                 */\n\n                active: PropTypes.bool,\n                /**\n                 * Refference to view's root DOM element.\n                 */\n                refDOM: PropTypes.object,\n                /**\n                 * Extra classes to use. Space separetad string list.\n                 */\n                className: PropTypes.string,\n                /**\n                 * Extra styles to use upon root DOM element of view.\n                 */\n                style: PropTypes.object\n            })\n        })\n    ),\n    /**\n     * Array of `mayers` objects that will be render into this Scene. Must contain special AirrMayer class properties.\n     * To check the possible values of properties go to AirrMayer declaration.\n     */\n    mayers: PropTypes.arrayOf(\n        PropTypes.shape({\n            /**\n             * The name of the mayer. Must be unique among others mayers in scene. Will be used as identification.\n             */\n            name: PropTypes.string.isRequired,\n            /**\n             * Extra styles to apply on Mayer's DOM element\n             */\n            style: PropTypes.object,\n            /**\n             * Parent scene height\n             */\n            avaibleHeight: PropTypes.number.isRequired,\n            /**\n             * Side from which mayer content box will enter\n             */\n            appearFrom: PropTypes.oneOf([\"top\", \"bottom\", \"left\", \"right\"]),\n            /**\n             * Side to which mayer content box will leave\n             */\n            leaveTo: PropTypes.oneOf([\"top\", \"bottom\", \"left\", \"right\"]),\n            /**\n             * Content of mayer\n             */\n\n            content: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n            /**\n             * Array with buttons configuration\n             */\n            buttons: PropTypes.arrayOf(\n                PropTypes.shape({\n                    /**\n                     * Extra class names to use upon button\n                     */\n                    className: PropTypes.string,\n                    /**\n                     * Extra attributes to apply on HTML element\n                     */\n                    attrs: PropTypes.object,\n                    /**\n                     * Additional inline styles\n                     */\n                    style: PropTypes.object,\n                    /**\n                     * OnClick function handler\n                     */\n                    handler: PropTypes.func,\n                    /**\n                     * Content to render inside Mayer. Might be string or ReactElement.\n                     */\n                    content: PropTypes.oneOfType([\n                        PropTypes.string,\n                        PropTypes.object\n                    ])\n                })\n            ),\n            /**\n             * Time in miliseconds of mayer's appear/disappear animation\n             */\n            animationTime: PropTypes.number\n        })\n    ),\n    /**\n     * Title that will be use in parent Scene navbar title section\n     */\n    title: PropTypes.string,\n    /**\n     * Extra, space separated classes names to use upon first div element.\n     */\n    className: PropTypes.string\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/AirrScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "AirrScene",
    "memberof": "lib/AirrScene.js",
    "static": true,
    "longname": "lib/AirrScene.js~AirrScene",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/AirrScene.js",
    "importStyle": "AirrScene",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "mayersCompsRefs",
    "memberof": "lib/AirrScene.js~AirrScene",
    "static": false,
    "longname": "lib/AirrScene.js~AirrScene#mayersCompsRefs",
    "access": "public",
    "description": "Mayers Components refferencies",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "getViewIndex",
    "memberof": "lib/AirrScene.js~AirrScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrScene.js~AirrScene#getViewIndex",
    "access": "public",
    "description": "Returns view index from this.props.views array",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "viewName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "handleBackButton",
    "memberof": "lib/AirrScene.js~AirrScene",
    "static": false,
    "longname": "lib/AirrScene.js~AirrScene#handleBackButton",
    "access": "public",
    "description": "Handles navbar backbutton tap events",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "handleMenuButtonToggleSidepanel",
    "memberof": "lib/AirrScene.js~AirrScene",
    "static": false,
    "longname": "lib/AirrScene.js~AirrScene#handleMenuButtonToggleSidepanel",
    "access": "public",
    "description": "Handles navbar menu button tap events",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "render",
    "memberof": "lib/AirrScene.js~AirrScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrScene.js~AirrScene#render",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "lib/AirrSceneWrapper.js",
    "content": "import React from \"react\";\nimport AirrFX from \"./AirrFX\";\nimport AirrScene from \"./AirrScene\";\nimport AirrViewWrapper from \"./AirrViewWrapper\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\n\nexport default class AirrSceneWrapper extends AirrViewWrapper {\n    /**\n     * Object that keep information about views configuraion objects.\n     * Every key in this object describes another view.\n     * That configuration later will be used to create new view and add it to state views array.\n     * Used by ::getFreshViewConfig to deliver new view config.\n     * This approach is mainly used in crucial components's ::changeView method.\n     */\n    viewsConfig = PropTypes.shape({\n        /**\n         * Simple view configuraion which can be found by key which is also it's name.\n         */\n        \"foo-view-name\": {\n            /**\n             * View type\n             */\n            type: AirrViewWrapper,\n            /**\n             * View props\n             */\n            props: {\n                name: \"foo-view-name\",\n                bar: \"baz\",\n                factor: 3\n            },\n            /**\n             * Props to modify Scene\n             */\n            sceneProps: {\n                navbar: 1,\n                backbutton: true\n            }\n        },\n        /**\n         * Common view configutaion that has nameGenerator property that is function\n         * used to create another view name propperty.\n         */\n        \"common-view-*\": {\n            /**\n             * View type\n             */\n            type: AirrViewWrapper,\n            /**\n             * View props\n             */\n            props: {\n                name: null,\n                baz: \"yoo\"\n            },\n            /**\n             * Props to modify Scene\n             */\n            sceneProps: {\n                navbar: 0\n            },\n            /**\n             * Function to generate next view name.\n             * Gets current state views list as argument.\n             */\n            nameGenerator: views => {\n                return \"common-view-*\".replace(\"*\", views.length + 1);\n            }\n        }\n    });\n\n    /**\n     * Instantiated views Components refferences\n     */\n    refsCOMPViews = {};\n    /**\n     * Instantiated mayers Components refferences\n     */\n    refsCOMPMayers = {};\n    /**\n     * Instantiated sidepanel Component refference\n     */\n    refCOMPSidepanel = React.createRef();\n    /**\n     * Refference to DOM element of container's div (first child of most outer element)\n     */\n    refDOMContainer = React.createRef();\n    /**\n     * Refference to DOM element of navbar's div\n     */\n    refDOMNavbar = React.createRef();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: props.name,\n            active: props.active,\n            navbar: props.navbar,\n            navbarHeight: props.navbarHeight,\n            navbarMenu: props.navbarMenu,\n            navbarClass: props.navbarClass,\n            backButton: props.backButton,\n            backButtonOnFirstView: props.backButtonOnFirstView,\n            activeViewName: props.activeViewName,\n            animation: props.animation,\n            views: props.views,\n            sidepanel: props.sidepanel,\n            GUIDisabled: props.GUIDisabled,\n            GUIDisableCover: props.GUIDisableCover,\n            mayers: props.mayers,\n            children: props.children,\n            animationTime: props.animationTime,\n            handleBackBehaviourOnFirstView:\n                props.handleBackBehaviourOnFirstView,\n            viewsAnimationEndCallback: props.viewsAnimationEndCallback,\n            handleBackButton: props.handleBackButton,\n            stackMode: props.stackMode\n        };\n    }\n\n    /**\n     * Creates new view config base on configuration in `viewsConfig` variable.\n     * When `viewNameGenerator` in present base configuration it will use to create new view name property.\n     * This feature is handy when you want to easly create next views based upon generic view configuration.\n     *\n     * @param {string} viewName Name of the configuraion key in `this.viewsConfig` object\n     * @param {object} props Additional prop to be merged with base config\n     */\n    getFreshViewConfig(viewName, props = {}) {\n        if (viewName in this.viewsConfig) {\n            const config = Object.assign({}, this.viewsConfig[viewName]);\n            const viewNameGenerator = this.viewsConfig[viewName].nameGenerator;\n\n            return update(this.viewsConfig[viewName], {\n                props: {\n                    $set: {\n                        ...Object.assign({}, config.props),\n                        ...Object.assign({}, props),\n                        name:\n                            viewNameGenerator &&\n                            typeof viewNameGenerator === \"function\"\n                                ? viewNameGenerator(this.state.views)\n                                : viewName\n                    }\n                }\n            });\n        } else {\n            throw new Error(\n                `Passed view name '${viewName}' is not present in viewsConfig.`\n            );\n        }\n    }\n\n    /**\n     * Array of views names to stay in `this.state.views` array when animation of views finishes.\n     * Used in `::viewsAnimationEndCallback` default method to filter views when needed.\n     * If you populate names in this array the filter feature will be active by default\n     * unless you overwrite `::viewsAnimationEndCallback` method in descendant class.\n     */\n    viewsNamesToStayList = [];\n    viewsAnimationEndCallback = () => {\n        /**\n         * If instance variable `viewsNamesToStayList` is set\n         * then we filter views array to leave only those with names\n         * present in `viewsNamesToStayList` list.\n         */\n        if (\n            Array.isArray(this.viewsNamesToStayList) &&\n            this.viewsNamesToStayList.length\n        ) {\n            this.viewsNamesToStayList.push(this.state.activeViewName);\n            this.__filterViews(this.viewsNamesToStayList).then(() => {\n                this.viewsNamesToStayList = [];\n            });\n        }\n    };\n\n    /**\n     * Removes views that are not contained by name in array\n     * @param {array} viewsNameList List of views names that will stay in state\n     * @returns {Promise} Will be resolved on succesful state update\n     */\n    __filterViews(viewsNameList = []) {\n        return new Promise(resolve => {\n            this.setState(\n                {\n                    views: this.state.views.filter(\n                        view => viewsNameList.indexOf(view.props.name) !== -1\n                    )\n                },\n                resolve\n            );\n        });\n    }\n\n    /**\n     * Disables scene's GUI by provinding extra layer on top of everything else.\n     * This layer can be customize by `cover` argument.\n     * @param {object} cover React element to be placed in covering layer\n     * @returns {Promise}  Will be resolved on succesful state update\n     */\n    disableGUI = (cover = null) => {\n        return new Promise(resolve =>\n            this.setState(\n                { GUIDisabled: true, GUIDisableCover: cover },\n                resolve\n            )\n        );\n    };\n\n    /**\n     * Disables layer covering scene and enable user interactions.\n     * @returns {Promise} Will be resolved on succesful state update\n     */\n    enableGUI = () => {\n        return new Promise(resolve =>\n            this.setState(\n                { GUIDisabled: false, GUIDisableCover: null },\n                resolve\n            )\n        );\n    };\n\n    /**\n     * Get view index in views array\n     * @param {string} viewName\n     * @returns {integer}\n     */\n    getViewIndex = viewName =>\n        this.state.views.findIndex(view => view.props.name === viewName);\n\n    /**\n     * Private method for pushing new view config into this.state.views array\n     * @param {object} config\n     * @param {object} sceneProps\n     * @returns {Promise}  Will be resolved on succesful state update\n     */\n    __pushView(config, sceneProps = {}) {\n        const newviewdefinition = update(this.state.views, { $push: [config] });\n        const stateChange = Object.assign(\n            {\n                views: newviewdefinition\n            },\n            Object.assign({}, config.sceneProps || {}),\n            Object.assign({}, sceneProps)\n        );\n\n        return new Promise(resolve =>\n            this.setState(stateChange, () => resolve(config.props.name))\n        );\n    }\n\n    /**\n     * Pops out with animation currently active view from view's array\n     * @param {object} viewProps props to modify the view just before popping\n     * @param {object} sceneProps props to modify the scene while popping\n     * @returns {Promise}  Will be resolved on succesful state update or rejected when no view to pop\n     */\n    popView = (viewProps = {}, sceneProps = {}) => {\n        if (this.state.views.length > 1) {\n            const viewName = this.state.views[this.state.views.length - 2].props\n                .name;\n\n            return this.changeView(viewName, viewProps, sceneProps).then(() => {\n                const newviewdefinition = update(this.state.views, {\n                    $splice: [[this.state.views.length - 1, 1]]\n                });\n\n                delete this.refsCOMPViews[\n                    this.state.views[this.state.views.length - 1].props.name\n                ];\n\n                return new Promise(resolve =>\n                    this.setState({ views: newviewdefinition }, () =>\n                        resolve(viewName)\n                    )\n                );\n            });\n        } else {\n            return Promise.reject();\n        }\n    };\n\n    /**\n     * Check wheter object is valid view config and can be added to view's array\n     * @param {object} object\n     * @returns {bool}\n     */\n    isValidViewConfig(object) {\n        return (\n            typeof object === \"object\" &&\n            \"type\" in object &&\n            typeof object.props === \"object\" &&\n            \"name\" in object.props\n        );\n    }\n\n    /**\n     * Crucial method of the scene component for manipalutaing views and scene properties and performing animations.\n     * Can change active view with animation or just update view and scene properties.\n     *\n     * Change view by:\n     * - string name kept in state views array which will lead to view change (with animation) or just update if currently active\n     * - string name kept in `this.viewsConfig` which will lead to view push (with animation)\n     * - new view config wich will lead to view change\n     *\n     * @param {string|object} view View name to change or view config to be added\n     * @param {object} viewProps Extra props to be added to changing view\n     * @param {object} sceneProps Extra props to manipulate this scene while changing view\n     * @returns {Promise} Resolved on state succesful change and animation end. Or reject on failure.\n     */\n    changeView(view, viewProps = {}, sceneProps = {}) {\n        return this.__changeView(view, viewProps, sceneProps).then(viewName => {\n            return this.__performViewsAnimation(viewName);\n        });\n    }\n\n    /**\n     * Removes view from views array\n     * @param {string} name\n     */\n    destroyView(name) {\n        return new Promise((resolve, reject) => {\n            const index = this.state.views.findIndex(\n                view => view.props.name === name\n            );\n\n            if (index !== -1) {\n                this.setState(\n                    {\n                        views: update(this.state.views, {\n                            $splice: [[index, 1]]\n                        })\n                    },\n                    resolve\n                );\n            } else {\n                reject(`View with name: ${name} was not found in this scene.`);\n            }\n        });\n    }\n\n    /**\n     * Make modification to scene's views by pushing new, updating current or changing between added views\n     *\n     * @param {string|object} view View name to change or view config to be added\n     * @param {object} viewProps Extra props to be added to changing view\n     * @param {object} sceneProps Extra props to manipulate this scene while changing view\n     * @returns {Promise} Resolved on state succesful change and animation end. Or reject on failure.\n     */\n    __changeView(view, viewProps = {}, sceneProps = {}) {\n        if (typeof view === \"string\") {\n            if (this.hasViewInState(view)) {\n                //if already in state then update its props\n                return new Promise(resolve => {\n                    const viewIndex = this.getViewIndex(view);\n                    const currentViewConfig = Object.assign(\n                        { sceneProps: {} }, //for a default props which will be latter used\n                        this.state.views[viewIndex]\n                    );\n                    const newViewConfig = update(currentViewConfig, {\n                        props: {\n                            $set: {\n                                ...currentViewConfig.props,\n                                ...viewProps\n                            }\n                        }\n                    });\n\n                    let stateChange = {\n                        views: update(this.state.views, {\n                            [viewIndex]: {\n                                $set: newViewConfig\n                            }\n                        }),\n                        ...currentViewConfig.sceneProps,\n                        ...Object.assign({}, sceneProps)\n                    };\n\n                    this.setState(stateChange, () => resolve(view));\n                });\n            } else if (this.hasViewInConfig(view)) {\n                //push fresh config\n                return this.__pushView(\n                    this.getFreshViewConfig(view, viewProps),\n                    sceneProps\n                );\n            } else return Promise.reject();\n        } else if (this.isValidViewConfig(view)) {\n            //push allready prepared config\n            return this.__pushView(\n                Object.assign({}, view, {\n                    props: { ...view.props, ...viewProps }\n                }),\n                sceneProps\n            );\n        } else {\n            return Promise.reject();\n        }\n    }\n\n    /**\n     * Check if view's name is described by some config in `this.viewsConfig` object\n     * @param {string} name\n     * @returns {bool}\n     */\n    hasViewInConfig = name => name in this.viewsConfig;\n\n    /**\n     * Check if view recognize by name argument is present in state\n     * @param {string} name\n     * @returns {bool}\n     */\n    hasViewInState = name =>\n        this.state.views.findIndex(view => view.props.name === name) !== -1\n            ? true\n            : false;\n\n    /**\n     * Utility function to handle back button clicks.\n     * Can be overwritten by class extending this wrapper.\n     * By default it pops currently active view.\n     * To use it, assign it's value to state like this:\n     * this.state.handleBackButton = this.handleBackButton\n     *\n     * @returns {Promise} Resolved on state succesful change or reject on failure.\n     */\n    handleBackButton = (viewProps, sceneProps) => {\n        if (this.state.views.length > 1) {\n            return this.popView(viewProps, sceneProps);\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * Disables scene's sidepanel by setting it prop enabled = false.\n     * @returns {Promise} Resolved on state succesful change or reject on failure.\n     */\n    disableSidepanel = () => {\n        if (this.state.sidepanel && this.refCOMPSidepanel.current) {\n            this.refCOMPSidepanel.current.disable();\n            return new Promise(resolve =>\n                this.setState(\n                    {\n                        sidepanel: update(this.state.sidepanel, {\n                            props: {\n                                enabled: { $set: false }\n                            }\n                        })\n                    },\n                    resolve\n                )\n            );\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * Enables scene's sidepanel by setting it prop enabled = true.\n     * @returns {Promise} Resolved on state succesful change or reject on failure.\n     */\n\n    enableSidepanel = () => {\n        if (this.state.sidepanel && this.refCOMPSidepanel.current) {\n            this.refCOMPSidepanel.current.enable();\n            return new Promise(resolve =>\n                this.setState(\n                    {\n                        sidepanel: update(this.state.sidepanel, {\n                            props: {\n                                enabled: { $set: true }\n                            }\n                        })\n                    },\n                    resolve\n                )\n            );\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * Shows sidepanel\n     * @returns {Promise}\n     */\n    openSidepanel = () => {\n        if (this.state.sidepanel && this.refCOMPSidepanel.current) {\n            return this.refCOMPSidepanel.current.show();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * Hides sidepanel\n     * @returns {Promise}\n     */\n    hideSidepanel = () => {\n        if (this.state.sidepanel && this.refCOMPSidepanel.current) {\n            return this.refCOMPSidepanel.current.hide();\n        }\n\n        return Promise.reject();\n    };\n\n    /**\n     * Add new mayer to this.state.mayers configurations array.\n     * This will immediatelly open new mayer due to `componentDidMount` lifecycle implementation.\n     *\n     * @param {object} config Mayer config object.\n     * @returns {Promise}\n     */\n    openMayer(config) {\n        if (\n            this.state.mayers.findIndex(item => item.name === config.name) !==\n            -1\n        ) {\n            console.warn(\n                \"[Airr] Scene allready has Mayer with this name: \" + config.name\n            );\n            return;\n        }\n\n        //if scene has sidepanel - disable it\n        if (this.state.sidepanel && this.state.sidepanel.props.enabled) {\n            this.disableSidepanel();\n        }\n\n        //add special functionality\n        const preparedConfig = this.__prepareMayerConfig(config);\n\n        return this.__addMayer(preparedConfig);\n    }\n\n    /**\n     * Close mayer by name\n     *\n     * @param {string} name Unique mayer name\n     * @returns {Promise}\n     */\n    closeMayer(name) {\n        let mayerConfigIndex = this.state.mayers.findIndex(\n            item => item.name === name\n        );\n\n        if (\n            mayerConfigIndex !== -1 &&\n            (this.refsCOMPMayers[name] && this.refsCOMPMayers[name].current)\n        ) {\n            this.refsCOMPMayers[name].current.animateOut(() => {\n                //renew index because after animation\n                //things might have changed\n                mayerConfigIndex = this.state.mayers.findIndex(\n                    item => item.name === name\n                );\n\n                //last check if stil present\n                if (\n                    mayerConfigIndex !== -1 &&\n                    (this.refsCOMPMayers[name] &&\n                        this.refsCOMPMayers[name].current)\n                ) {\n                    return this.__removeMayer(name).then(() => {\n                        delete this.refsCOMPMayers[name];\n\n                        if (this.state.sidepanel) {\n                            let hasMayerLeft = false;\n                            const children = [...this.refDOM.current.children];\n                            children.forEach(item => {\n                                if (item.classList.contains(\"airr-mayer\")) {\n                                    hasMayerLeft = true;\n                                }\n                            });\n\n                            if (!hasMayerLeft) {\n                                this.enableSidepanel();\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * If config has buttons that contains logical true `close` property,\n     * this method will attach close mayer functionality to tap event on this button.\n     *\n     * @param {object} mayerConfig mayer config object\n     * @returns {object}\n     */\n    __prepareMayerConfig(mayerConfig) {\n        const config = Object.assign({}, mayerConfig);\n\n        const ref = React.createRef();\n        config.ref = ref;\n        this.refsCOMPMayers[config.name] = ref;\n\n        if (config.buttons && config.buttons.length) {\n            config.buttons.forEach(item => {\n                if (item.close) {\n                    if (item.handler) {\n                        const oldHandler = item.handler;\n                        item.handler = e => {\n                            oldHandler(e);\n                            this.closeMayer(config.name);\n                        };\n                    } else {\n                        item.handler = e => {\n                            this.closeMayer(config.name);\n                        };\n                    }\n                }\n            });\n        }\n\n        return config;\n    }\n\n    /**\n     * Private utility for adding mayers\n     * @param {objec} config\n     * @returns {Promise}\n     */\n    __addMayer = config => {\n        const newMayersDef = update(this.state.mayers, { $push: [config] });\n\n        return new Promise(resolve =>\n            this.setState(\n                {\n                    mayers: newMayersDef\n                },\n                resolve\n            )\n        );\n    };\n\n    /**\n     * Private utility for removing mayers\n     * @param {string} name Mayer name\n     * @returns {Promise}\n     */\n\n    __removeMayer = name => {\n        const newMayersDef = this.state.mayers.filter(item => {\n            return item.name !== name;\n        });\n\n        return new Promise(resolve =>\n            this.setState(\n                {\n                    mayers: newMayersDef\n                },\n                resolve\n            )\n        );\n    };\n\n    /**\n     * Disables back button meaning it will not be visible in navbar anymore.\n     * @returns {Promise}\n     */\n    disableBackButton = () => {\n        return new Promise(resolve =>\n            this.setState({ backButton: false }, resolve)\n        );\n    };\n\n    /**\n     * Enables back button meaning it will be visible in navbar.\n     * @returns {Promise}\n     */\n    enableBackButton = () => {\n        return new Promise(resolve =>\n            this.setState({ backButton: true }, resolve)\n        );\n    };\n\n    /**\n     * Action dispatcher method. Will return a function ready to fire view change.\n     * @param {string} name\n     * @param {array} viewsNamesToStayList\n     * @returns {function} Function that will resolve view change on invoke.\n     */\n    goToView = (name, viewsNamesToStayList = []) => {\n        return (params = {}, sceneProps = {}) => {\n            this.viewsNamesToStayList = viewsNamesToStayList;\n            return this.changeView(name, params, sceneProps);\n        };\n    };\n\n    componentDidMount() {\n        if (\n            this.state.navbar &&\n            this.state.navbarHeight &&\n            this.refDOMContainer.current\n        ) {\n            //subsctract navbar height from scene's container\n            this.refDOMContainer.current.style.height =\n                this.refDOMContainer.current.parentNode.clientHeight -\n                this.state.navbarHeight +\n                \"px\";\n        }\n\n        /**\n         * Call first active view life cycle method - viewAfterActivation\n         */\n        if (\n            this.state.activeViewName &&\n            this.refsCOMPViews[this.state.activeViewName] &&\n            typeof this.refsCOMPViews[this.state.activeViewName].current\n                .viewAfterActivation === \"function\"\n        ) {\n            this.refsCOMPViews[\n                this.state.activeViewName\n            ].current.viewAfterActivation();\n        }\n    }\n\n    /**\n     * Private utility function for preparing sidepanel configuration objects\n     * @param {object} sidepanel\n     * @returns {object}\n     */\n    __prepareSidepanel(sidepanel) {\n        sidepanel.props.ref = this.refCOMPSidepanel;\n        sidepanel.props.visibilityCallback = isShown => {\n            this.setState({\n                sidepanel: update(this.state.sidepanel, {\n                    props: {\n                        isShown: {\n                            $set: isShown\n                        }\n                    }\n                })\n            });\n        };\n\n        if (typeof sidepanel.props.enabled === \"undefined\") {\n            sidepanel.props.enabled = true; //force explicit value, e.g needed when checking if panel is enabled in `openMayer` method\n        }\n\n        return Object.assign({}, sidepanel);\n    }\n\n    /**\n     * Takes array of views and assign react specific properties (key and ref) to each view configuartion\n     *\n     * @param {array} views\n     * @returns {array}\n     */\n    __prepareViews(views) {\n        return views.map(item => {\n            item.props.key = item.props.name;\n\n            const ref = React.createRef();\n            item.props.ref = ref;\n            this.refsCOMPViews[item.props.name] = ref;\n\n            return item;\n        });\n    }\n\n    render() {\n        const { views, sidepanel, className, ...stateRest } = this.state;\n\n        return (\n            <AirrScene\n                {...{\n                    ...stateRest,\n                    views: this.__prepareViews(views),\n                    sidepanel: sidepanel && this.__prepareSidepanel(sidepanel),\n                    refDOM: this.refDOM,\n                    refDOMContainer: this.refDOMContainer,\n                    refDOMNavbar: this.refDOMNavbar,\n                    refCOMPSidepanel: this.refCOMPSidepanel\n                }}\n                {...this.getViewProps()}\n                {...{ className }}\n            />\n        );\n    }\n\n    /**\n     * Describes if views animation is taking place\n     */\n    viewChangeInProgress = false;\n\n    /**\n     * Private utility function that changes views with animation\n     *\n     * @param {string} newViewName\n     * @returns {Promise}\n     */\n    __performViewsAnimation(newViewName) {\n        if (typeof newViewName === \"string\") {\n            this.viewChangeInProgress = true;\n\n            return new Promise((resolve, reject) => {\n                if (newViewName === this.state.activeViewName) {\n                    console.warn(\"[Airr] This View is already active.\");\n                    this.viewChangeInProgress = false;\n                    return resolve();\n                }\n\n                this.setState(\n                    { GUIDisabled: true, mockTitle: newViewName },\n                    () => {\n                        if (this.getViewIndex(newViewName) !== -1) {\n                            const oldViewName = this.state.activeViewName;\n                            const newViewComp =\n                                this.refsCOMPViews[newViewName] &&\n                                this.refsCOMPViews[newViewName].current;\n                            const oldViewComp =\n                                this.refsCOMPViews[oldViewName] &&\n                                this.refsCOMPViews[oldViewName].current;\n                            const animEndCallback = () => {\n                                this.viewChangeInProgress = false;\n\n                                if (\n                                    newViewComp &&\n                                    typeof newViewComp.viewAfterActivation ===\n                                        \"function\"\n                                ) {\n                                    newViewComp.viewAfterActivation();\n                                }\n\n                                if (\n                                    oldViewComp &&\n                                    typeof oldViewComp.viewAfterDeactivation ===\n                                        \"function\"\n                                ) {\n                                    oldViewComp.viewAfterDeactivation();\n                                }\n\n                                if (\n                                    typeof this.props\n                                        .viewsAnimationEndCallback ===\n                                    \"function\"\n                                ) {\n                                    this.props.viewsAnimationEndCallback();\n                                }\n\n                                resolve();\n                            };\n\n                            if (\n                                newViewComp &&\n                                typeof newViewComp.viewBeforeActivation ===\n                                    \"function\"\n                            ) {\n                                newViewComp.viewBeforeActivation();\n                            }\n\n                            if (\n                                oldViewComp &&\n                                typeof oldViewComp.viewBeforeDeactivation ===\n                                    \"function\"\n                            ) {\n                                oldViewComp.viewBeforeDeactivation();\n                            }\n\n                            if (this.state.animation) {\n                                this.__doViewsAnimation(\n                                    newViewName,\n                                    oldViewName\n                                ).then(() => {\n                                    this.setState(\n                                        {\n                                            activeViewName: newViewName,\n                                            GUIDisabled: false,\n                                            mockTitle: false\n                                        },\n                                        animEndCallback\n                                    );\n                                });\n                            } else {\n                                this.setState(\n                                    {\n                                        activeViewName: newViewName,\n                                        GUIDisabled: false,\n                                        mockTitle: false\n                                    },\n                                    animEndCallback\n                                );\n                            }\n                        } else {\n                            this.viewChangeInProgress = false;\n                            console.warn(\n                                \"[Airr] View with name \" +\n                                    newViewName +\n                                    \" is not presence in this Scene.\"\n                            );\n                            reject();\n                        }\n                    }\n                );\n            });\n        } else {\n            console.warn(\n                \"[Airr] You must specify view name property as string value\"\n            );\n            return Promise.reject();\n        }\n    }\n\n    /**\n     * Private utility function. This one actually makes css animations.\n     *\n     * @param {string} newViewName\n     * @param {string} oldViewName\n     * @returns {Promise}\n     */\n    __doViewsAnimation(newViewName, oldViewName) {\n        return new Promise((resolve, reject) => {\n            const newViewDOM =\n                this.refsCOMPViews[newViewName] &&\n                this.refsCOMPViews[newViewName].current &&\n                this.refsCOMPViews[newViewName].current.refDOM &&\n                this.refsCOMPViews[newViewName].current.refDOM.current;\n            const oldViewIndex = this.getViewIndex(oldViewName);\n            const newViewIndex = this.getViewIndex(newViewName);\n\n            const direction = newViewIndex > oldViewIndex ? 1 : -1;\n\n            if (!newViewDOM) {\n                throw new Error(\"new view DOM refference was not found\");\n            }\n\n            if (this.state.navbar) {\n                //perform navbar animations\n                const titleNode = this.refDOMNavbar.current.querySelector(\n                    \".title\"\n                );\n                const mockTitle = this.refDOMNavbar.current.querySelector(\n                    \".mock-title\"\n                );\n                const mockTextSpan = mockTitle && mockTitle.children[0];\n                const mockTextSpanWidth = mockTextSpan\n                    ? mockTextSpan.clientWidth\n                    : 0;\n\n                if (titleNode) {\n                    AirrFX.doTransitionAnimation(\n                        titleNode,\n                        {\n                            webkitTransform: `translate3d(${(titleNode.clientWidth /\n                                2 +\n                                mockTextSpanWidth / 2) *\n                                direction +\n                                \"px\"},0,0)`,\n                            transform: `translate3d(${(titleNode.clientWidth /\n                                2 +\n                                mockTextSpanWidth / 2) *\n                                direction +\n                                \"px\"},0,0)`,\n                            opacity: 0\n                        },\n                        [\n                            `opacity ${this.state.animationTime}ms ease-out`,\n                            `transform ${this.state.animationTime}ms ease-out`\n                        ],\n                        {\n                            webkitTransform: `translate3d(0,0,0)`,\n                            transform: `translate3d(0,0,0)`,\n                            opacity: 1\n                        },\n                        null,\n                        this.state.animationTime\n                    );\n                }\n\n                if (mockTitle) {\n                    AirrFX.doTransitionAnimation(\n                        mockTitle,\n                        {\n                            webkitTransform: \"translate3d(0,0,0)\",\n                            transform: \"translate3d(0,0,0)\",\n                            opacity: 1\n                        },\n                        [\n                            `opacity ${this.state.animationTime}ms ease-out`,\n                            `transform ${this.state.animationTime}ms ease-out`\n                        ],\n                        {\n                            webkitTransform: `translate3d(${mockTextSpanWidth *\n                                direction *\n                                -1 +\n                                \"px\"},0,0)`,\n                            transform: `translate3d(${mockTextSpanWidth *\n                                direction *\n                                -1 +\n                                \"px\"},0,0)`,\n                            opacity: 0\n                        },\n                        null,\n                        this.state.animationTime\n                    );\n                }\n\n                if (\n                    this.state.backButton &&\n                    !this.state.backButtonOnFirstView\n                ) {\n                    const backDOM = this.refDOMNavbar.current.querySelector(\n                        \".back\"\n                    );\n\n                    if (oldViewIndex === 0) {\n                        //show back button with animation\n                        AirrFX.doTransitionAnimation(\n                            backDOM,\n                            {\n                                webkitTransform: \"translate3d(100%,0,0)\",\n                                transform: \"translate3d(100%,0,0)\",\n                                opacity: 0\n                            },\n                            [\n                                `opacity ${\n                                    this.state.animationTime\n                                }ms ease-out`,\n                                `transform ${\n                                    this.state.animationTime\n                                }ms ease-out`\n                            ],\n                            {\n                                webkitTransform: \"translate3d(0,0,0)\",\n                                transform: \"translate3d(0,0,0)\",\n                                opacity: 1\n                            },\n                            () => backDOM.classList.remove(\"hidden\"),\n                            this.state.animationTime\n                        );\n                    } else if (newViewIndex === 0) {\n                        //hide backbutton with animation\n                        AirrFX.doTransitionAnimation(\n                            backDOM,\n                            {\n                                webkitTransform: \"translate3d(0,0,0)\",\n                                transform: \"translate3d(0,0,0)\",\n                                opacity: 1\n                            },\n                            [\n                                `opacity ${\n                                    this.state.animationTime\n                                }ms ease-out`,\n                                `transform ${\n                                    this.state.animationTime\n                                }ms ease-out`\n                            ],\n                            {\n                                webkitTransform: \"translate3d(-100%,0,0)\",\n                                transform: \"translate3d(-100%,0,0)\",\n                                opacity: 0\n                            },\n                            null,\n                            this.state.animationTime,\n                            () => {\n                                backDOM.style.webkitTransform = \"\";\n                                backDOM.style.transform = \"\";\n                                backDOM.style.opacity = \"\";\n                            }\n                        );\n                    }\n                }\n            }\n\n            if (this.state.animation === \"slide\" && oldViewName) {\n                newViewDOM.style.display = \"block\";\n                let startProps = {};\n                let endProps = {};\n\n                if (direction === -1) {\n                    startProps.webkitTransform =\n                        \"translate3d(\" +\n                        -1 * this.refDOM.current.clientWidth +\n                        \"px,0,0)\";\n                    startProps.transform =\n                        \"translate3d(\" +\n                        -1 * this.refDOM.current.clientWidth +\n                        \"px,0,0)\";\n                    endProps.webkitTransform = \"translate3d(0,0,0)\";\n                    endProps.transform = \"translate3d(0,0,0)\";\n                } else {\n                    endProps.webkitTransform =\n                        \"translate3d(\" +\n                        -1 * this.refDOM.current.clientWidth +\n                        \"px,0,0)\";\n                    endProps.transform =\n                        \"translate3d(\" +\n                        -1 * this.refDOM.current.clientWidth +\n                        \"px,0,0)\";\n                }\n\n                AirrFX.doTransitionAnimation(\n                    this.refDOMContainer.current,\n                    startProps,\n                    [`transform ${this.state.animationTime}ms ease-out`],\n                    endProps,\n                    null,\n                    this.state.animationTime,\n                    () => {\n                        newViewDOM.style.display = \"\";\n                        this.refDOMContainer.current.style.webkitTransform =\n                            \"translate3d(0,0,0)\";\n                        this.refDOMContainer.current.style.transform =\n                            \"translate3d(0,0,0)\";\n                        this.refDOMContainer.current.style.webkitTransition =\n                            \"\";\n                        this.refDOMContainer.current.style.transition = \"\";\n                        this.refDOMContainer.current.style.transition = \"\";\n                        this.refDOMContainer.current.style.webkitBackfaceVisibility =\n                            \"\";\n                        this.refDOMContainer.current.style.backfaceVisibility =\n                            \"\";\n\n                        resolve();\n                    }\n                );\n            } else if (this.state.animation === \"overlay\" && oldViewName) {\n                if (direction === 1) {\n                    AirrFX.doTransitionAnimation(\n                        newViewDOM,\n                        {\n                            webkitTransform: `translate3d(${this.refDOMContainer\n                                .current.clientWidth + \"px\"},0,0)`,\n                            transform: `translate3d(${this.refDOMContainer\n                                .current.clientWidth + \"px\"},0,0)`,\n                            opacity: 0,\n                            display: \"block\"\n                        },\n                        [\n                            `opacity ${this.state.animationTime}ms ease-out`,\n                            `transform ${this.state.animationTime}ms ease-out`\n                        ],\n                        {\n                            webkitTransform: `translate3d(0,0,0)`,\n                            transform: `translate3d(0,0,0)`,\n                            opacity: 1\n                        },\n                        () => (newViewDOM.style.zIndex = 102),\n                        this.state.animationTime,\n                        () => {\n                            newViewDOM.style.zIndex = \"\";\n                            newViewDOM.style.display = \"\";\n                            newViewDOM.style.transform = \"\";\n                            newViewDOM.style.webkitTransform = \"\";\n                            newViewDOM.style.transition = \"\";\n                            newViewDOM.style.webkitTransition = \"\";\n                            newViewDOM.style.opacity = \"\";\n\n                            resolve();\n                        }\n                    );\n                } else {\n                    if (this.state.stackMode) {\n                        const oldViewDOM = this.refsCOMPViews[oldViewName]\n                            .current.refDOM.current;\n                        newViewDOM.style.display = \"block\";\n                        newViewDOM.style.opacity = 1;\n\n                        AirrFX.doTransitionAnimation(\n                            oldViewDOM,\n                            {\n                                webkitTransform: `translate3d(0,0,0)`,\n                                transform: `translate3d(0,0,0)`,\n                                opacity: 1\n                            },\n                            [\n                                `opacity ${\n                                    this.state.animationTime\n                                }ms ease-out`,\n                                `transform ${\n                                    this.state.animationTime\n                                }ms ease-out`\n                            ],\n                            {\n                                webkitTransform: `translate3d(0,${this\n                                    .refDOMContainer.current.clientHeight /\n                                    4 +\n                                    \"px\"},0)`,\n                                transform: `translate3d(0,${this.refDOMContainer\n                                    .current.clientHeight /\n                                    4 +\n                                    \"px\"},0)`,\n                                opacity: 0\n                            },\n                            null,\n                            this.state.animationTime,\n                            () => {\n                                oldViewDOM.style.transition = \"\";\n                                oldViewDOM.style.webkitTransition = \"\";\n                                oldViewDOM.style.transform = \"\";\n                                oldViewDOM.style.webkitTransform = \"\";\n                                oldViewDOM.style.opacity = \"\";\n\n                                newViewDOM.style.display = \"\";\n                                newViewDOM.style.opacity = \"\";\n\n                                resolve();\n                            }\n                        );\n                    } else {\n                        newViewDOM.style.display = \"block\";\n\n                        AirrFX.doTransitionAnimation(\n                            newViewDOM,\n                            {\n                                webkitTransform: `translate3d(${-1 *\n                                    this.refDOMContainer.current.clientWidth +\n                                    \"px\"},0,0)`,\n                                transform: `translate3d(${-1 *\n                                    this.refDOMContainer.current.clientWidth +\n                                    \"px\"},0,0)`,\n                                opacity: 0\n                            },\n                            [\n                                `opacity ${\n                                    this.state.animationTime\n                                }ms ease-out`,\n                                `transform ${\n                                    this.state.animationTime\n                                }ms ease-out`\n                            ],\n                            {\n                                webkitTransform: `translate3d(0,0,0)`,\n                                transform: `translate3d(0,0,0)`,\n                                opacity: 1\n                            },\n                            () => (newViewDOM.style.zIndex = 102),\n                            this.state.animationTime,\n                            () => {\n                                newViewDOM.style.display = \"\";\n                                newViewDOM.style.zIndex = \"\";\n                                newViewDOM.style.transform = \"\";\n                                newViewDOM.style.webkitTransform = \"\";\n                                newViewDOM.style.transition = \"\";\n                                newViewDOM.style.webkitTransition = \"\";\n                                newViewDOM.style.opacity = \"\";\n\n                                resolve();\n                            }\n                        );\n                    }\n                }\n            } else if (this.state.animation === \"fade\" || !oldViewName) {\n                AirrFX.doTransitionAnimation(\n                    newViewDOM,\n                    {\n                        opacity: 0\n                    },\n                    [`opacity ${this.state.animationTime}ms ease-out`],\n                    {\n                        opacity: 1\n                    },\n                    () => (newViewDOM.style.zIndex = 102),\n                    this.state.animationTime,\n                    () => {\n                        newViewDOM.style.zIndex = \"\";\n                        resolve();\n                    }\n                );\n            }\n        });\n    }\n}\n\nAirrSceneWrapper.defaultProps = {\n    name: \"\",\n    activeViewName: null,\n    GUIDisabled: false,\n    GUIDisableCover: null,\n    animation: \"slide\",\n    animationTime: 300,\n    navbar: false,\n    navbarHeight: 48,\n    navbarMenu: null,\n    navbarClass: \"\",\n    backButton: false,\n    backButtonOnFirstView: false,\n    handleBackButton: null,\n    handleBackBehaviourOnFirstView: null,\n    viewsAnimationEndCallback: null,\n    active: false,\n    sidepanel: null,\n    views: [],\n    mayers: [],\n    title: \"\",\n    className: \"\",\n\n    stackMode: false\n};\nAirrSceneWrapper.propTypes = {\n    /**\n     * The name of the scene. Must be unique among others views in parent scene. Will be used as identification string\n     */\n    name: PropTypes.string.isRequired,\n    /**\n     * Name of the active view.\n     */\n    activeViewName: PropTypes.string,\n    /**\n     * Boolean telling if GUI should be disabled meaning no user actions, events are allowed.\n     * GUI is disabled via absolute positioned, not visible div that has the biggest z-Index\n     */\n    GUIDisabled: PropTypes.bool,\n    /**\n     * React element to be placed in GUI disabling div\n     */\n    GUIDisableCover: PropTypes.object,\n    /**\n     * Type of animation to perform when switching views\n     */\n    animation: PropTypes.oneOf([\"slide\", \"overlay\", \"fade\", false]),\n    /**\n     * Time of views changing animatio\n     */\n    animationTime: PropTypes.number,\n    /**\n     * Specify if navbar is present (1,true) or not (0,false). Or maybe hidden (-1)\n     */\n    navbar: PropTypes.oneOf([-1, 0, false, 1, true]),\n    /**\n     * Height of the navbar in pixels\n     */\n    navbarHeight: PropTypes.number,\n    /**\n     * Navbar menu is placed on the right most side. Might contain \"toggleSidepanel\" button or any custom buttons list.\n     */\n    navbarMenu: function(props, propName, componentName) {\n        if (props[propName]) {\n            if (typeof props[propName] === \"string\") {\n                if (!/toggleSidepanel/.test(props[propName])) {\n                    return new Error(\n                        \"Invalid prop `\" +\n                            propName +\n                            \"` supplied to\" +\n                            \" `\" +\n                            componentName +\n                            \"`. Value must be `toggleSidepanel` string or array of React elements.\"\n                    );\n                } else {\n                    return null;\n                }\n            }\n\n            if (!Array.isArray(props[propName])) {\n                return new Error(\n                    \"Invalid prop `\" +\n                        propName +\n                        \"` supplied to\" +\n                        \" `\" +\n                        componentName +\n                        \"`. Value must be `toggleSidepanel` string or array of React elements.\"\n                );\n            }\n        }\n    },\n    /**\n     * Extra, space separated, navbar's class names list\n     */\n    navbarClass: PropTypes.string,\n    /**\n     * Boolean specifing if navbar renders BackButton. Placed by default on the left side of navbar.\n     */\n    backButton: PropTypes.bool,\n    /**\n     * Do you need to still show backButton even if scene is rendering first view from stack?\n     */\n    backButtonOnFirstView: PropTypes.bool,\n    /**\n     * Function that will handle back button click events\n     */\n    handleBackButton: PropTypes.func,\n    /**\n     * Function that will handle back button clicks events on when first view in stack is active\n     */\n    handleBackBehaviourOnFirstView: PropTypes.func,\n    /**\n     * Callback that will be invoked when views animation finishes\n     */\n    viewsAnimationEndCallback: PropTypes.func,\n    /**\n     * Is this view active in parent scene\n     */\n    active: PropTypes.bool,\n    /**\n     * Sidepanels declaration. Must contain two properties: `type` and `props`\n     **/\n    sidepanel: PropTypes.shape({\n        /**\n         * Refference to class or function that will render AirrSidepanel. Might be AirrSidepanel itself.\n         */\n        type: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n            .isRequired,\n        /**\n         * Special properties of AirrSidepanel class. Go to class declaration for further properties documenation.\n         */\n        props: PropTypes.shape({\n            /**\n             * Side to which sidepanel will be attached\n             */\n            side: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]),\n            /**\n             * Bool determining if sidepanel is shown or not\n             */\n            isShown: PropTypes.bool,\n            /**\n             * Bool determining if sidepanel is enabled, another words, if its can be drag out\n             */\n            enabled: PropTypes.bool,\n            /**\n             * Number between 0 and 1 determining how much size of whole screen sidepanel will take\n             */\n            sizeFactor: PropTypes.number,\n            /**\n             * Parent scene width dimension. Passed by scene itself.\n             */\n            sceneWidth: PropTypes.number.isRequired,\n            /**\n             * Parent scene height dimension. Passed by scene itself.\n             */\n            sceneHeight: PropTypes.number.isRequired,\n            /**\n             * Do you want to animate sidepanel showing in/out\n             */\n            animateShown: PropTypes.bool,\n            /**\n             * Callback called when sidepanel changes its visibility during touch events. Passed by scene itself.\n             */\n            visibilityCallback: PropTypes.func,\n            /**\n             * Animation time in miliseconds\n             */\n            animationTime: PropTypes.number,\n            /**\n             * Opacity between 0 and 1\n             */\n            bgLayerOpacity: PropTypes.number\n        })\n    }),\n    /**\n     * Array of `views`. Every view object declaration must contain two properties: `type` and `props`.\n     */\n    views: PropTypes.arrayOf(\n        PropTypes.shape({\n            /**\n             * Refference to class or function that will render AirrView. The most common and adviced approach is to use AirrViewWrapper.\n             */\n            type: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n                .isRequired,\n            /**\n             * Special properties of AirrView class. Go to class declaration for further properties documenation.\n             */\n            props: PropTypes.shape({\n                /**\n                 * The name of the view. Must be unique among others views in scene. Will be used as identification string\n                 */\n                name: PropTypes.string.isRequired,\n                /**\n                 * Titlebar name. if parent scene navbar is enabled, this title will be showed there\n                 */\n                title: PropTypes.string,\n                /**\n                 * Determine if this view is active. Set by parent scene.\n                 */\n\n                active: PropTypes.bool,\n                /**\n                 * Refference to view's root DOM element.\n                 */\n                refDOM: PropTypes.object,\n                /**\n                 * Extra classes to use. Space separetad string list.\n                 */\n                className: PropTypes.string,\n                /**\n                 * Extra styles to use upon root DOM element of view.\n                 */\n                style: PropTypes.object\n            })\n        })\n    ),\n    /**\n     * Array of `mayers` objects that will be render into this Scene. Must contain special AirrMayer class properties.\n     * To check the possible values of properties go to AirrMayer declaration.\n     */\n    mayers: PropTypes.arrayOf(\n        PropTypes.shape({\n            /**\n             * The name of the mayer. Must be unique among others mayers in scene. Will be used as identification.\n             */\n            name: PropTypes.string.isRequired,\n            /**\n             * Extra styles to apply on Mayer's DOM element\n             */\n            style: PropTypes.object,\n            /**\n             * Parent scene height\n             */\n            avaibleHeight: PropTypes.number.isRequired,\n            /**\n             * Side from which mayer content box will enter\n             */\n            appearFrom: PropTypes.oneOf([\"top\", \"bottom\", \"left\", \"right\"]),\n            /**\n             * Side to which mayer content box will leave\n             */\n            leaveTo: PropTypes.oneOf([\"top\", \"bottom\", \"left\", \"right\"]),\n            /**\n             * Content of mayer\n             */\n\n            content: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n            /**\n             * Array with buttons configuration\n             */\n            buttons: PropTypes.arrayOf(\n                PropTypes.shape({\n                    /**\n                     * Extra class names to use upon button\n                     */\n                    className: PropTypes.string,\n                    /**\n                     * Extra attributes to apply on HTML element\n                     */\n                    attrs: PropTypes.object,\n                    /**\n                     * Additional inline styles\n                     */\n                    style: PropTypes.object,\n                    /**\n                     * OnClick function handler\n                     */\n                    handler: PropTypes.func,\n                    /**\n                     * Content to render inside Mayer. Might be string or ReactElement.\n                     */\n                    content: PropTypes.oneOfType([\n                        PropTypes.string,\n                        PropTypes.object\n                    ])\n                })\n            ),\n            /**\n             * Time in miliseconds of mayer's appear/disappear animation\n             */\n            animationTime: PropTypes.number\n        })\n    ),\n    /**\n     * Title that will be use in parent Scene navbar title section\n     */\n    title: PropTypes.string,\n    /**\n     * Extra, space separated classes names to use upon first div element.\n     */\n    className: PropTypes.string,\n    /**\n     * This propety changes behaviour of views animation when overlay animation is set\n     */\n    stackMode: PropTypes.bool\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/AirrSceneWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "AirrSceneWrapper",
    "memberof": "lib/AirrSceneWrapper.js",
    "static": true,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/AirrSceneWrapper.js",
    "importStyle": "AirrSceneWrapper",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "lib/AirrViewWrapper.js~AirrViewWrapper"
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "viewsConfig",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#viewsConfig",
    "access": "public",
    "description": "Object that keep information about views configuraion objects.\nEvery key in this object describes another view.\nThat configuration later will be used to create new view and add it to state views array.\nUsed by ::getFreshViewConfig to deliver new view config.\nThis approach is mainly used in crucial components's ::changeView method.",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "refsCOMPViews",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#refsCOMPViews",
    "access": "public",
    "description": "Instantiated views Components refferences",
    "lineNumber": 76,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "refsCOMPMayers",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#refsCOMPMayers",
    "access": "public",
    "description": "Instantiated mayers Components refferences",
    "lineNumber": 80,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "refCOMPSidepanel",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#refCOMPSidepanel",
    "access": "public",
    "description": "Instantiated sidepanel Component refference",
    "lineNumber": 84,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "refDOMContainer",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#refDOMContainer",
    "access": "public",
    "description": "Refference to DOM element of container's div (first child of most outer element)",
    "lineNumber": 88,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "refDOMNavbar",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#refDOMNavbar",
    "access": "public",
    "description": "Refference to DOM element of navbar's div",
    "lineNumber": 92,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "state",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#state",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": *, \"active\": *, \"navbar\": *, \"navbarHeight\": *, \"navbarMenu\": *, \"navbarClass\": *, \"backButton\": *, \"backButtonOnFirstView\": *, \"activeViewName\": *, \"animation\": *, \"views\": *, \"sidepanel\": *, \"GUIDisabled\": *, \"GUIDisableCover\": *, \"mayers\": *, \"children\": *, \"animationTime\": *, \"handleBackBehaviourOnFirstView\": *, \"viewsAnimationEndCallback\": *, \"handleBackButton\": *, \"stackMode\": *}"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getFreshViewConfig",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#getFreshViewConfig",
    "access": "public",
    "description": "Creates new view config base on configuration in `viewsConfig` variable.\nWhen `viewNameGenerator` in present base configuration it will use to create new view name property.\nThis feature is handy when you want to easly create next views based upon generic view configuration.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "viewName",
        "description": "Name of the configuraion key in `this.viewsConfig` object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Additional prop to be merged with base config"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "viewsNamesToStayList",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#viewsNamesToStayList",
    "access": "public",
    "description": "Array of views names to stay in `this.state.views` array when animation of views finishes.\nUsed in `::viewsAnimationEndCallback` default method to filter views when needed.\nIf you populate names in this array the filter feature will be active by default\nunless you overwrite `::viewsAnimationEndCallback` method in descendant class.",
    "lineNumber": 162,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "viewsAnimationEndCallback",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#viewsAnimationEndCallback",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "__filterViews",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__filterViews",
    "access": "private",
    "description": "Removes views that are not contained by name in array",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Will be resolved on succesful state update"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "viewsNameList",
        "description": "List of views names that will stay in state"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will be resolved on succesful state update"
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "disableGUI",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#disableGUI",
    "access": "public",
    "description": "Disables scene's GUI by provinding extra layer on top of everything else.\nThis layer can be customize by `cover` argument.",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}  Will be resolved on succesful state update"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "cover",
        "description": "React element to be placed in covering layer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will be resolved on succesful state update"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "enableGUI",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#enableGUI",
    "access": "public",
    "description": "Disables layer covering scene and enable user interactions.",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Will be resolved on succesful state update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will be resolved on succesful state update"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "getViewIndex",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#getViewIndex",
    "access": "public",
    "description": "Get view index in views array",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{integer}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "viewName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "__pushView",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__pushView",
    "access": "private",
    "description": "Private method for pushing new view config into this.state.views array",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}  Will be resolved on succesful state update"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneProps",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will be resolved on succesful state update"
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "popView",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#popView",
    "access": "public",
    "description": "Pops out with animation currently active view from view's array",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}  Will be resolved on succesful state update or rejected when no view to pop"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "viewProps",
        "description": "props to modify the view just before popping"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneProps",
        "description": "props to modify the scene while popping"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will be resolved on succesful state update or rejected when no view to pop"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "isValidViewConfig",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#isValidViewConfig",
    "access": "public",
    "description": "Check wheter object is valid view config and can be added to view's array",
    "lineNumber": 291,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "changeView",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#changeView",
    "access": "public",
    "description": "Crucial method of the scene component for manipalutaing views and scene properties and performing animations.\nCan change active view with animation or just update view and scene properties.\n\nChange view by:\n- string name kept in state views array which will lead to view change (with animation) or just update if currently active\n- string name kept in `this.viewsConfig` which will lead to view push (with animation)\n- new view config wich will lead to view change",
    "lineNumber": 314,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolved on state succesful change and animation end. Or reject on failure."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "View name to change or view config to be added"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "viewProps",
        "description": "Extra props to be added to changing view"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneProps",
        "description": "Extra props to manipulate this scene while changing view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved on state succesful change and animation end. Or reject on failure."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "destroyView",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#destroyView",
    "access": "public",
    "description": "Removes view from views array",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "__changeView",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__changeView",
    "access": "private",
    "description": "Make modification to scene's views by pushing new, updating current or changing between added views",
    "lineNumber": 353,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolved on state succesful change and animation end. Or reject on failure."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "View name to change or view config to be added"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "viewProps",
        "description": "Extra props to be added to changing view"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneProps",
        "description": "Extra props to manipulate this scene while changing view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved on state succesful change and animation end. Or reject on failure."
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "hasViewInConfig",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#hasViewInConfig",
    "access": "public",
    "description": "Check if view's name is described by some config in `this.viewsConfig` object",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "hasViewInState",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#hasViewInState",
    "access": "public",
    "description": "Check if view recognize by name argument is present in state",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "handleBackButton",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#handleBackButton",
    "access": "public",
    "description": "Utility function to handle back button clicks.\nCan be overwritten by class extending this wrapper.\nBy default it pops currently active view.\nTo use it, assign it's value to state like this:\nthis.state.handleBackButton = this.handleBackButton",
    "lineNumber": 430,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolved on state succesful change or reject on failure."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved on state succesful change or reject on failure."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "disableSidepanel",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#disableSidepanel",
    "access": "public",
    "description": "Disables scene's sidepanel by setting it prop enabled = false.",
    "lineNumber": 442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolved on state succesful change or reject on failure."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved on state succesful change or reject on failure."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "enableSidepanel",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#enableSidepanel",
    "access": "public",
    "description": "Enables scene's sidepanel by setting it prop enabled = true.",
    "lineNumber": 467,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolved on state succesful change or reject on failure."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved on state succesful change or reject on failure."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "openSidepanel",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#openSidepanel",
    "access": "public",
    "description": "Shows sidepanel",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "hideSidepanel",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#hideSidepanel",
    "access": "public",
    "description": "Hides sidepanel",
    "lineNumber": 503,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "openMayer",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#openMayer",
    "access": "public",
    "description": "Add new mayer to this.state.mayers configurations array.\nThis will immediatelly open new mayer due to `componentDidMount` lifecycle implementation.",
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Mayer config object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "closeMayer",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#closeMayer",
    "access": "public",
    "description": "Close mayer by name",
    "lineNumber": 546,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Unique mayer name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "__prepareMayerConfig",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__prepareMayerConfig",
    "access": "private",
    "description": "If config has buttons that contains logical true `close` property,\nthis method will attach close mayer functionality to tap event on this button.",
    "lineNumber": 597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "mayerConfig",
        "description": "mayer config object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "__addMayer",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__addMayer",
    "access": "private",
    "description": "Private utility for adding mayers",
    "lineNumber": 630,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "objec"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "__removeMayer",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__removeMayer",
    "access": "private",
    "description": "Private utility for removing mayers",
    "lineNumber": 649,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Mayer name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "disableBackButton",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#disableBackButton",
    "access": "public",
    "description": "Disables back button meaning it will not be visible in navbar anymore.",
    "lineNumber": 668,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "enableBackButton",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#enableBackButton",
    "access": "public",
    "description": "Enables back button meaning it will be visible in navbar.",
    "lineNumber": 678,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "goToView",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#goToView",
    "access": "public",
    "description": "Action dispatcher method. Will return a function ready to fire view change.",
    "lineNumber": 690,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} Function that will resolve view change on invoke."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "viewsNamesToStayList",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Function that will resolve view change on invoke."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 697,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "__prepareSidepanel",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__prepareSidepanel",
    "access": "private",
    "description": "Private utility function for preparing sidepanel configuration objects",
    "lineNumber": 730,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sidepanel",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "__prepareViews",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__prepareViews",
    "access": "private",
    "description": "Takes array of views and assign react specific properties (key and ref) to each view configuartion",
    "lineNumber": 757,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "views",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "render",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#render",
    "access": "public",
    "description": null,
    "lineNumber": 769,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "viewChangeInProgress",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#viewChangeInProgress",
    "access": "public",
    "description": "Describes if views animation is taking place",
    "lineNumber": 792,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "__performViewsAnimation",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__performViewsAnimation",
    "access": "private",
    "description": "Private utility function that changes views with animation",
    "lineNumber": 800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newViewName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "__doViewsAnimation",
    "memberof": "lib/AirrSceneWrapper.js~AirrSceneWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSceneWrapper.js~AirrSceneWrapper#__doViewsAnimation",
    "access": "private",
    "description": "Private utility function. This one actually makes css animations.",
    "lineNumber": 919,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newViewName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "oldViewName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "lib/AirrSidepanel.js",
    "content": "import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { isMobileDevice, supportPassive } from \"./eventHelpers\";\n\nexport default class AirrSidepanel extends Component {\n    size;\n    sceneSize;\n    currentVal;\n    hiddenVal;\n    shownVal;\n    transformScheme;\n    axis;\n    lastSide;\n    lastSizeFactor;\n\n    refDOMDragCtn = React.createRef();\n    refDOMBgLayer = React.createRef();\n    refDOM = React.createRef();\n    sceneDOM;\n\n    lastTouch;\n\n    // state = {\n    //     side: this.props.side,\n    //     isShown: this.props.isShown,\n    //     sizeFactor: this.props.sizeFactor,\n    //     sceneWidth: this.props.sceneWidth,\n    //     sceneHeight: this.props.sceneHeight\n    // };\n\n    startEvent = isMobileDevice ? \"touchstart\" : \"mousedown\";\n    moveEvent = isMobileDevice ? \"touchmove\" : \"mousemove\";\n    endEvent = isMobileDevice ? \"touchend\" : \"mouseup\";\n\n    enable() {\n        this.sceneDOM.removeEventListener(\n            this.startEvent,\n            this.handleTouchStart\n        );\n        this.sceneDOM.addEventListener(\n            this.startEvent,\n            this.handleTouchStart,\n            supportPassive\n        );\n    }\n\n    disable() {\n        this.sceneDOM.removeEventListener(\n            this.startEvent,\n            this.handleTouchStart\n        );\n    }\n\n    componentDidMount() {\n        this.sceneDOM = this.refDOM.current.parentNode;\n\n        if (this.props.enabled) {\n            this.enable();\n        }\n    }\n\n    __bubbleChildTillParent(child, parent, tillElements) {\n        if (child.parentNode === parent) {\n            return true;\n        } else {\n            if (\n                !child.parentNode ||\n                tillElements.indexOf(child.parentNode) !== -1\n            ) {\n                return false;\n            } else {\n                return this.__bubbleChildTillParent(\n                    child.parentNode,\n                    parent,\n                    tillElements\n                );\n            }\n        }\n    }\n\n    getPosition = (e, axis) => {\n        return \"changedTouches\" in e\n            ? e.changedTouches[0][\"client\" + axis]\n            : e[\"client\" + axis];\n    };\n\n    getLastPosition = e => {\n        return \"changedTouches\" in e\n            ? e.changedTouches[0]\n            : { clientX: e.clientX, clientY: e.clientY };\n    };\n\n    getEventX = e => {\n        return \"changedTouches\" in e ? e.changedTouches[0].clientX : e.clientX;\n    };\n\n    getEventY = e => {\n        return \"changedTouches\" in e ? e.changedTouches[0].clientY : e.clientY;\n    };\n\n    handleTouchStart = e => {\n        const pos = this.getPosition(e, this.axis);\n        let dragCtnOnTouchPath = false;\n\n        if (e.path) {\n            for (let i = 0; i < e.path.length; i++) {\n                if (e.path[i] === this.refDOMDragCtn.current) {\n                    dragCtnOnTouchPath = true;\n                }\n            }\n        } else {\n            if (\n                e.target === this.refDOMDragCtn.current ||\n                this.__bubbleChildTillParent(\n                    e.target,\n                    this.refDOMDragCtn.current,\n                    [this.refDOMDragCtn.current.parentNode, document.body]\n                )\n            ) {\n                dragCtnOnTouchPath = true;\n            }\n        }\n\n        if (\n            !dragCtnOnTouchPath &&\n            (([\"left\", \"top\"].indexOf(this.props.side) !== -1 && pos < 20) ||\n                ([\"right\", \"bottom\"].indexOf(this.props.side) !== -1 &&\n                    pos > this.hiddenVal - 20))\n        ) {\n            //corner touch, show moves\n\n            this.refDOM.current.style.display = \"block\";\n            this.sceneDOM.addEventListener(\n                this.moveEvent,\n                this.handleShowTouchMove,\n                supportPassive\n            );\n            this.sceneDOM.addEventListener(\n                this.endEvent,\n                this.handleTouchEnd,\n                false\n            );\n\n            // this.triggerCustom(\"showTouchStart\");\n\n            const showmoveend = () => {\n                this.sceneDOM.removeEventListener(this.endEvent, showmoveend); //remove self to act like once listener\n                this.sceneDOM.removeEventListener(\n                    this.moveEvent,\n                    this.handleShowTouchMove\n                );\n                // this.triggerCustom(\"showTouchEnd\");\n            };\n\n            this.sceneDOM.addEventListener(this.endEvent, showmoveend, false);\n        } else if (this.currentVal === this.shownVal) {\n            //fully visible, hide moves\n            this.sceneDOM.addEventListener(\n                this.moveEvent,\n                this.handleHideTouchMove,\n                supportPassive\n            );\n            this.sceneDOM.addEventListener(\n                this.endEvent,\n                this.handleTouchEnd,\n                false\n            );\n\n            // this.triggerCustom(\"hideTouchStart\");\n\n            const hidemoveend = () => {\n                this.sceneDOM.removeEventListener(this.endEvent, hidemoveend);\n                this.sceneDOM.removeEventListener(\n                    this.moveEvent,\n                    this.handleHideTouchMove\n                );\n                // this.triggerCustom(\"hideTouchEnd\");\n            };\n\n            this.sceneDOM.addEventListener(this.endEvent, hidemoveend, false);\n        }\n\n        if (e.target === this.refDOMBgLayer.current) {\n            //tap to hide\n            if (\n                ([\"left\", \"top\"].indexOf(this.props.side) !== -1 &&\n                    this.currentVal === 0) ||\n                ([\"right\", \"bottom\"].indexOf(this.props.side) !== -1 &&\n                    this.currentVal)\n            ) {\n                const hidedragctn = e => {\n                    this.sceneDOM.removeEventListener(\n                        this.endEvent,\n                        hidedragctn\n                    );\n                    if (Math.abs(pos - this.getPosition(e, this.axis)) <= 2.5) {\n                        this.hide();\n                    }\n                };\n\n                this.sceneDOM.addEventListener(\n                    this.endEvent,\n                    hidedragctn,\n                    false\n                );\n            }\n        }\n\n        this.lastTouch = this.getLastPosition(e);\n    };\n\n    handleShowTouchMove = e => {\n        const pos = this.getPosition(e, this.axis);\n        let newVal, progress;\n\n        if ([\"left\", \"top\"].indexOf(this.props.side) !== -1) {\n            if (pos <= -1 * this.hiddenVal) {\n                newVal = this.hiddenVal + pos;\n            } else {\n                newVal = this.shownVal;\n            }\n            progress = pos / this.size;\n        } else {\n            if (this.hiddenVal - pos <= this.size) {\n                newVal = pos;\n            } else {\n                newVal = this.shownVal;\n            }\n            progress = (this.sceneSize - pos) / this.size;\n        }\n\n        if (newVal !== this.currentVal) {\n            this.currentVal = newVal;\n            progress = parseFloat(progress);\n            progress = progress > 1 ? 1 : progress < 0 ? 0 : progress;\n\n            this.refDOMBgLayer.current.style.opacity =\n                progress * this.props.bgLayerOpacity;\n\n            this.refDOMDragCtn.current.style.webkitTransform = this.transformScheme.replace(\n                \"%v\",\n                this.currentVal\n            );\n            this.refDOMDragCtn.current.style.transform = this.transformScheme.replace(\n                \"%v\",\n                this.currentVal\n            );\n        }\n\n        this.lastTouch = this.getLastPosition(e);\n\n        if (!supportPassive) {\n            e.preventDefault();\n        }\n    };\n\n    handleHideTouchMove = e => {\n        let progress, newVal, change, moveAxis;\n\n        if (this.lastTouch) {\n            if (\n                Math.abs(this.lastTouch.clientX - this.getEventX(e)) >=\n                Math.abs(this.lastTouch.clientY - this.getEventY(e))\n            ) {\n                if (this.getEventX(e) - this.lastTouch.clientX <= 0) {\n                    // move = 'left';\n                    moveAxis = \"X\";\n                } else {\n                    // move = 'right';\n                    moveAxis = \"X\";\n                }\n            } else {\n                if (this.getEventY(e) - this.lastTouch.clientY <= 0) {\n                    // move = 'top';\n                    moveAxis = \"Y\";\n                } else {\n                    // move = 'bottom';\n                    moveAxis = \"Y\";\n                }\n            }\n        }\n\n        if (\n            moveAxis === this.axis &&\n            (([\"left\", \"top\"].indexOf(this.props.side) !== -1 &&\n                this.getPosition(e, moveAxis) < this.size) ||\n                ([\"right\", \"bottom\"].indexOf(this.props.side) !== -1 &&\n                    this.getPosition(e, moveAxis) > this.hiddenVal - this.size))\n        ) {\n            change =\n                this.getPosition(e, this.axis) -\n                this.lastTouch[\"client\" + this.axis];\n            newVal = this.currentVal + change;\n\n            if (this.props.side === \"left\" || this.props.side === \"top\") {\n                if (newVal < this.hiddenVal) {\n                    newVal = this.hiddenVal;\n                } else if (newVal > this.shownVal) {\n                    newVal = this.shownVal;\n                }\n\n                progress = 1 - Math.abs(newVal / this.size);\n            } else {\n                if (newVal > this.hiddenVal) {\n                    newVal = this.hiddenVal;\n                } else if (newVal < this.shownVal) {\n                    newVal = this.shownVal;\n                }\n\n                progress = (this.sceneSize - newVal) / this.size;\n            }\n\n            if (newVal !== this.currentVal) {\n                this.currentVal = newVal;\n                progress = parseFloat(progress);\n                progress = progress > 1 ? 1 : progress < 0 ? 0 : progress;\n\n                this.refDOMBgLayer.current.style.opacity =\n                    progress * this.props.bgLayerOpacity;\n\n                this.refDOMDragCtn.current.style.webkitTransform = this.transformScheme.replace(\n                    \"%v\",\n                    this.currentVal\n                );\n                this.refDOMDragCtn.current.style.transform = this.transformScheme.replace(\n                    \"%v\",\n                    this.currentVal\n                );\n            }\n        }\n\n        this.lastTouch = this.getLastPosition(e);\n        if (!supportPassive) {\n            e.preventDefault();\n        }\n    };\n\n    handleTouchEnd = e => {\n        let val = null;\n\n        if (!this.animating) {\n            if (\n                this.currentVal !== this.shownVal &&\n                this.currentVal !== this.hiddenVal\n            ) {\n                if ([\"left\", \"top\"].indexOf(this.props.side) !== -1) {\n                    if (this.currentVal >= this.hiddenVal / 2) {\n                        val = this.shownVal;\n                    } else {\n                        val = this.hiddenVal;\n                    }\n                } else {\n                    if (this.currentVal < this.hiddenVal - this.size / 2) {\n                        val = this.shownVal;\n                    } else {\n                        val = this.hiddenVal;\n                    }\n                }\n            } else if (this.currentVal === this.hiddenVal) {\n                this.refDOM.current.style.display = \"none\";\n            }\n\n            if (val !== null) {\n                this.translateTo(val);\n            } else {\n                if (this.props.isShown !== this.isShown()) {\n                    this.props.visibilityCallback(this.props.isShown);\n                }\n            }\n        }\n\n        this.sceneDOM.removeEventListener(this.endEvent, this.handleTouchEnd);\n    };\n\n    hide = () => {\n        return this.translateTo(this.hiddenVal);\n    };\n\n    show = () => {\n        return this.translateTo(this.shownVal);\n    };\n\n    isShown = () => {\n        return this.refDOM.current.offsetParent !== null;\n    };\n\n    translateTo = finishVal => {\n        return new Promise(resolve => {\n            this.animating = true;\n\n            this.refDOMBgLayer.current.style.webkitTransition = `opacity ${\n                this.props.animationTime\n            }ms ease-in`;\n            this.refDOMBgLayer.current.style.transition = `opacity ${\n                this.props.animationTime\n            }ms ease-in`;\n            // eslint-disable-next-line\n            this.refDOMBgLayer.current.offsetHeight;\n\n            if (finishVal === this.shownVal) {\n                if (!this.isShown()) {\n                    this.refDOM.current.style.display = \"block\";\n                }\n\n                this.refDOMBgLayer.current.style.opacity = this.props.bgLayerOpacity;\n            } else if (finishVal === this.hiddenVal) {\n                this.refDOMBgLayer.current.style.opacity = 0;\n            }\n            // eslint-disable-next-line\n            this.refDOM.current.offsetHeight;\n            this.refDOM.current.style.webkitTransition = \"initial\";\n            this.refDOM.current.style.transition = \"initial\";\n\n            this.refDOMDragCtn.current.style.webkitTransition = `-webkit-transform ${\n                this.props.animationTime\n            }ms ease-out`;\n            this.refDOMDragCtn.current.style.webkitTransition = `transform ${\n                this.props.animationTime\n            }ms ease-out`;\n            this.refDOMDragCtn.current.style.transition = `transform ${\n                this.props.animationTime\n            }ms ease-out`;\n\n            // eslint-disable-next-line\n            this.refDOMDragCtn.current.offsetHeight;\n            this.refDOMDragCtn.current.style.webkitTransform = this.transformScheme.replace(\n                \"%v\",\n                finishVal\n            );\n            this.refDOMDragCtn.current.style.transform = this.transformScheme.replace(\n                \"%v\",\n                finishVal\n            );\n\n            // eslint-disable-next-line\n            this.refDOMDragCtn.current.offsetHeight;\n\n            this.refDOMDragCtn.current.style.webkitTransition = \"initial\";\n            this.refDOMDragCtn.current.style.transition = \"initial\";\n\n            setTimeout(() => {\n                this.refDOMBgLayer.current.style.webkitTransition = \"initial\";\n                this.refDOMBgLayer.current.style.transition = \"initial\";\n\n                this.currentVal = finishVal;\n\n                if (finishVal === this.hiddenVal) {\n                    this.refDOM.current.style.display = \"none\";\n                }\n\n                this.animating = false;\n\n                if (this.props.isShown !== this.isShown()) {\n                    this.props.visibilityCallback(this.isShown());\n                }\n\n                resolve(this.isShown());\n            }, this.props.animationTime + 5);\n        });\n    };\n\n    updateSideProps(side, sizeFactor) {\n        if (side === \"left\" || side === \"right\") {\n            this.size = this.props.sceneWidth * sizeFactor;\n            this.sceneSize = this.props.sceneWidth;\n            this.hiddenVal =\n                side === \"left\" ? -1 * this.size : this.props.sceneWidth;\n            this.transformScheme = \"translate3d(%vpx,0,0)\";\n            this.axis = \"X\";\n        } else {\n            //top,bottom\n            this.size = this.props.sceneHeight * sizeFactor;\n            this.sceneSize = this.props.sceneHeight;\n            this.hiddenVal =\n                side === \"top\" ? -1 * this.size : this.props.sceneHeight;\n            this.transformScheme = \"translate3d(0,%vpx,0)\";\n            this.axis = \"Y\";\n        }\n\n        if (side === \"top\" || side === \"left\") {\n            this.shownVal = 0;\n        } else {\n            this.shownVal = this.sceneSize - this.size;\n        }\n\n        if (this.props.isShown) {\n            this.currentVal = this.shownVal;\n        } else {\n            this.currentVal = this.hiddenVal;\n        }\n\n        this.lastSide = side;\n        this.lastSizeFactor = sizeFactor;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.enabled !== this.props.enabled) {\n            return this[this.props.enabled ? \"enable\" : \"disable\"]();\n        }\n    }\n\n    render() {\n        const className =\n            \"airr-sidepanel \" + this.props.side + \" \" + (this.props.enabled ? \"enabled\" : \"disabled\");            \n        const dragCtnStyle = {};\n        let sidepanelStyle;\n        let bgLayerStyle;\n\n        if (\n            this.props.side !== this.lastSide ||\n            this.props.sizeFactor !== this.lastSizeFactor\n        ) {\n            this.updateSideProps(this.props.side, this.props.sizeFactor);\n        }\n\n        if (this.props.side === \"left\" || this.props.side === \"right\") {\n            dragCtnStyle.width = this.size + \"px\";\n            dragCtnStyle.height = \"100%\";\n        } else {\n            //top,bottom\n            dragCtnStyle.height = this.size + \"px\";\n            dragCtnStyle.width = \"100%\";\n        }\n\n        if (this.props.isShown) {\n            dragCtnStyle.WebkitTransform = this.transformScheme.replace(\n                \"%v\",\n                this.shownVal\n            );\n            dragCtnStyle.transform = this.transformScheme.replace(\n                \"%v\",\n                this.shownVal\n            );\n            sidepanelStyle = { display: \"block\" };\n            bgLayerStyle = { opacity: this.props.bgLayerOpacity };\n        } else {\n            dragCtnStyle.WebkitTransform = this.transformScheme.replace(\n                \"%v\",\n                this.hiddenVal\n            );\n            dragCtnStyle.transform = this.transformScheme.replace(\n                \"%v\",\n                this.hiddenVal\n            );\n            sidepanelStyle = { display: \"none\" };\n            bgLayerStyle = { opacity: 0 };\n        }\n\n        const children =\n            typeof this.props.children === \"function\"\n                ? this.props.children()\n                : this.props.children;\n\n        return (\n            <div className={className} ref={this.refDOM} style={sidepanelStyle}>\n                <div ref={this.refDOMBgLayer} style={bgLayerStyle} />\n                <div ref={this.refDOMDragCtn} style={dragCtnStyle}>\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\nAirrSidepanel.propTypes = {\n    /**\n     * Side to which sidepanel will be attached\n     */\n    side: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]),\n    /**\n     * Bool determining if sidepanel is shown or not\n     */\n    isShown: PropTypes.bool,\n    /**\n     * Bool determining if sidepanel is enabled, another words, if its can be drag out\n     */\n    enabled: PropTypes.bool,\n    /**\n     * Number between 0 and 1 determining how much size of whole screen sidepanel will take\n     */\n    sizeFactor: PropTypes.number,\n    /**\n     * Parent scene width dimension. Set by parent scene. Do not overwrite!.\n     */\n    sceneWidth: PropTypes.number.isRequired,\n    /**\n     * Parent scene height dimension. Set by parent scene. Do not overwrite!.\n     */\n    sceneHeight: PropTypes.number.isRequired,\n    /**\n     * Do you want to animate sidepanel showing in/out\n     */\n    animateShown: PropTypes.bool,\n    /**\n     * Callback called when sidepanel changes its visibility during touch events. Set by parent scene. Do not overwrite!.\n     */\n    visibilityCallback: PropTypes.func,\n    /**\n     * Animation time in miliseconds\n     */\n    animationTime: PropTypes.number,\n    /**\n     * Opacity between 0 and 1\n     */\n    bgLayerOpacity: PropTypes.number\n};\nAirrSidepanel.defaultProps = {\n    side: \"left\",\n    isShown: false,\n    enabled: false,\n    sizeFactor: 2 / 3,\n    sceneWidth: null,\n    sceneHeight: null,\n    animateShown: true,\n    visibilityCallback: function(isShown) {},\n    animationTime: 200,\n    bgLayerOpacity: 0.7\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/AirrSidepanel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "AirrSidepanel",
    "memberof": "lib/AirrSidepanel.js",
    "static": true,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/AirrSidepanel.js",
    "importStyle": "AirrSidepanel",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "size",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#size",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "sceneSize",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#sceneSize",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "currentVal",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#currentVal",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "hiddenVal",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#hiddenVal",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "shownVal",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#shownVal",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "transformScheme",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#transformScheme",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "axis",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#axis",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "lastSide",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#lastSide",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "lastSizeFactor",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#lastSizeFactor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "refDOMDragCtn",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#refDOMDragCtn",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "refDOMBgLayer",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#refDOMBgLayer",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "refDOM",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#refDOM",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "sceneDOM",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#sceneDOM",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "lastTouch",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#lastTouch",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "startEvent",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#startEvent",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "moveEvent",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#moveEvent",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "endEvent",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#endEvent",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "enable",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#enable",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "disable",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#disable",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "__bubbleChildTillParent",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#__bubbleChildTillParent",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "child",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "tillElements",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "getPosition",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#getPosition",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "getLastPosition",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#getLastPosition",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "getEventX",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#getEventX",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "getEventY",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#getEventY",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "handleTouchStart",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#handleTouchStart",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "handleShowTouchMove",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#handleShowTouchMove",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "handleHideTouchMove",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#handleHideTouchMove",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "handleTouchEnd",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#handleTouchEnd",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "hide",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#hide",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "show",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#show",
    "access": "public",
    "description": null,
    "lineNumber": 379,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "isShown",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#isShown",
    "access": "public",
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "translateTo",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#translateTo",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "animating",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#animating",
    "access": "public",
    "description": null,
    "lineNumber": 389,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "updateSideProps",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#updateSideProps",
    "access": "public",
    "description": null,
    "lineNumber": 462,
    "undocument": true,
    "params": [
      {
        "name": "side",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizeFactor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 496,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "render",
    "memberof": "lib/AirrSidepanel.js~AirrSidepanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrSidepanel.js~AirrSidepanel#render",
    "access": "public",
    "description": null,
    "lineNumber": 502,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "lib/AirrView.js",
    "content": "import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class AirrView extends Component {\n    render() {\n        const {\n            name,\n            title,\n            active,\n            refDOM,\n            className,\n            style,\n            ...rest\n        } = this.props;\n        let viewClass = \"airr-view\" + (className ? \" \" + className : \"\");\n\n        active && (viewClass += \" active\");\n\n        return (\n            <div className={viewClass} style={style} ref={refDOM} {...rest}>\n                {typeof this.props.children === \"function\"\n                    ? this.props.children()\n                    : this.props.children}\n            </div>\n        );\n    }\n}\n\nAirrView.propTypes = {\n    /**\n     * The name of the view. Must be unique among others views in scene. Will be used as identification string\n     */\n    name: PropTypes.string.isRequired,\n    /**\n     * Titlebar name. if parent scene navbar is enabled, this title will be showed there\n     */\n    title: PropTypes.string,\n    /**\n     * Determine if this view is active. Set by parent scene.\n     */    \n    active: PropTypes.bool,\n    /**\n     * Refference to view's root DOM element.\n     */\n    refDOM: PropTypes.object,\n    /**\n     * Extra classes to use. Space separetad string list.\n     */\n    className: PropTypes.string,\n    /**\n     * Extra styles to use upon root DOM element of view.\n     */\n    style: PropTypes.object\n};\n\nAirrView.defaultProps = {\n    name: \"\",\n    title: \"\",\n    active: false,\n    refDOM: null,\n    className: \"\",\n    style: {}\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/AirrView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "AirrView",
    "memberof": "lib/AirrView.js",
    "static": true,
    "longname": "lib/AirrView.js~AirrView",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/AirrView.js",
    "importStyle": "AirrView",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "render",
    "memberof": "lib/AirrView.js~AirrView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrView.js~AirrView#render",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "lib/AirrViewWrapper.js",
    "content": "import React, { Component } from \"react\";\nimport AirrView from \"./AirrView\";\nimport PropTypes from \"prop-types\";\n\nexport default class AirrViewWrapper extends Component {\n    /**\n     * Refferency to view's DOM element.\n     */\n    refDOM = React.createRef();\n\n    /**\n     * Special method for delivering props to AirrView component's.\n     * Used in render method.\n     */\n    getViewProps = () => ({\n        refDOM: this.refDOM,\n        name: this.props.name,\n        active: this.props.active,\n        title: this.props.title,\n        className: this.props.className,\n        style: this.props.style\n    });\n\n    /**\n     * Primary render method.\n     * Should be overwritten in descendant class.\n     * @returns {ReactElement}\n     */\n    content() {\n        console.warn(\n            \"[Airr] This method should be overwritten in descendant class\"\n        );\n    }\n\n    /**\n     * Wrapper method to render content. Generate special props upon AirrView component.\n     * Use ::content() in descenadant class instead of overwritting this one.\n     * @returns {ReactElement}\n     */\n    render() {\n        return (\n            <AirrView {...this.getViewProps()}>{() => this.content()}</AirrView>\n        );\n    }\n}\n\nAirrViewWrapper.propTypes = {\n    /**\n     * The name of the view. Must be unique among others views in scene. Will be used as identification string\n     */\n    name: PropTypes.string.isRequired,\n    /**\n     * Titlebar name. if parent scene navbar is enabled, this title will be showed there\n     */\n    title: PropTypes.string,\n    /**\n     * Determine if this view is active. Set by parent scene.\n     */\n    active: PropTypes.bool,\n    /**\n     * Refference to view's root DOM element.\n     */\n    refDOM: PropTypes.object,\n    /**\n     * Extra classes to use. Space separetad string list.\n     */\n    className: PropTypes.string,\n    /**\n     * Extra styles to use upon root DOM element of view.\n     */\n    style: PropTypes.object\n};\nAirrViewWrapper.defaultProps = {\n    name: \"\",\n    title: \"\",\n    active: false,\n    refDOM: null,\n    className: \"\",\n    style: {}\n};\n",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/AirrViewWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "AirrViewWrapper",
    "memberof": "lib/AirrViewWrapper.js",
    "static": true,
    "longname": "lib/AirrViewWrapper.js~AirrViewWrapper",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/AirrViewWrapper.js",
    "importStyle": "AirrViewWrapper",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "refDOM",
    "memberof": "lib/AirrViewWrapper.js~AirrViewWrapper",
    "static": false,
    "longname": "lib/AirrViewWrapper.js~AirrViewWrapper#refDOM",
    "access": "public",
    "description": "Refferency to view's DOM element.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "getViewProps",
    "memberof": "lib/AirrViewWrapper.js~AirrViewWrapper",
    "static": false,
    "longname": "lib/AirrViewWrapper.js~AirrViewWrapper#getViewProps",
    "access": "public",
    "description": "Special method for delivering props to AirrView component's.\nUsed in render method.",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "content",
    "memberof": "lib/AirrViewWrapper.js~AirrViewWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrViewWrapper.js~AirrViewWrapper#content",
    "access": "public",
    "description": "Primary render method.\nShould be overwritten in descendant class.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReactElement}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "render",
    "memberof": "lib/AirrViewWrapper.js~AirrViewWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/AirrViewWrapper.js~AirrViewWrapper#render",
    "access": "public",
    "description": "Wrapper method to render content. Generate special props upon AirrView component.\nUse ::content() in descenadant class instead of overwritting this one.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReactElement}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "lib/eventHelpers.js",
    "content": "let supportPassive = false;\n// create options object with a getter to see if its passive property is accessed\nconst opts = Object.defineProperty && Object.defineProperty({}, 'passive', {get: function () {\n    supportPassive = {passive:true};\n}});\n// create a throwaway element & event and (synchronously) test out our options\ndocument.addEventListener('test', () => {}, opts);\n\nconst mobileTest = /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/;\nconst isMobileDevice = mobileTest.test(navigator.userAgent);\n\nexport {supportPassive, isMobileDevice};",
    "static": true,
    "longname": "/Users/rafal/Desktop/Projects/airr-react/lib/eventHelpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "opts",
    "memberof": "lib/eventHelpers.js",
    "static": true,
    "longname": "lib/eventHelpers.js~opts",
    "access": "public",
    "export": false,
    "importPath": "airr-react/lib/eventHelpers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "mobileTest",
    "memberof": "lib/eventHelpers.js",
    "static": true,
    "longname": "lib/eventHelpers.js~mobileTest",
    "access": "public",
    "export": false,
    "importPath": "airr-react/lib/eventHelpers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "supportPassive",
    "memberof": "lib/eventHelpers.js",
    "static": true,
    "longname": "lib/eventHelpers.js~supportPassive",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/eventHelpers.js",
    "importStyle": "{supportPassive}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "name": "isMobileDevice",
    "memberof": "lib/eventHelpers.js",
    "static": true,
    "longname": "lib/eventHelpers.js~isMobileDevice",
    "access": "public",
    "export": true,
    "importPath": "airr-react/lib/eventHelpers.js",
    "importStyle": "{isMobileDevice}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# airr-react\n\nThis library is set of several React components that allows building Single Page Apps for desktop and mobile using React.js itself.\nAirr-react defines few basic UI classes and features that every app needs.\nIt can be your starting point for creating unique apps.\n\nIt can be used for:\n\n*   creating custom looking and behaving apps,\n*   rapidly designing prototypes showing your ideas,\n*   creating responsive apps that will handle mobile and desktop rendering.\n\nCreate unique apps with minimal or none overwrites upon choosen library styles and structures and keep your DOM tree simple.\nCore elements are allready defined and working and the rest is up to you.\n\nTo check all main features go and see demonstration app:\n\n**[airr-react mobile demo app](http://react.airr.pl)**\n\nbrowse in Chrome for best experience.\n\nLibary code was designed to handle WebViews runtimes from Android 4.4+ and iOS8+.\n\n## Prerequisites\n\nBefore you continue with project installation make sure you have installed:\n\n*   [node.js](https://nodejs.org/en/)\n\n## Installation\n\n### The simplest\n\nThe most easy way to start using airr-react components in your React app is to add it to your allready created project with npm\n\n```\nnpm install airr-react\n```\n\n### The demo\n\nIf you want to explore demo app as a code refference just download `demo-app` directory content, open your system console and execute standard installation command on this directory:\n\n```\nnpm install\n```\n\nafter that you can perform another known line:\n\n```\nnpm start\n```\n\nto activate react scripts and your local version of demo-app.\n\n### Other\n\nIf you are having custom react configuration feel free to investigate airr-react usage on your own. Just install it with npm like in \"The simplest\" section.\n\n## Airr Components life-cycles\n\nAirr library provides easy to implement app views life-cycles methods.\nWhen you are dealing with mobile app development you have to deal with many tasks before or after certain view is activated and animated into the screen.\n\nLike Reacts `componentDidMount` method, Airr provides self explanatory methods that can be used by Components that extends `ViewWrapper` and `SceneWrapper` components. These methods are:\n\n*   `viewBeforeActivation`\n*   `viewAfterActivation`\n*   `viewBeforeDeactivation`\n*   `viewAfterDeactivation`\n\nYou can search for these methods in demo-app code to find out how they are used.\n\n## Usage\n\nFor components usage please reffer at the moment to the demo app code.\n\n## Documentation\n\nReal docs are planned to be written in the future.\nMethods and properties descriptions aswell as properties specification can be found in library files at `airr-react/lib`.\nFor Airr Components descriptions check [the demo app](http://react.airr.pl).\n\n### Building project for Cordova\n\nWhen building your production code using `npm run build` with `react-scripts` remember about proper configuration for specific platforms:\n\n*   Android - add `\"homepage\": \"file:///android_asset/www\"` entry to your package.json\n*   iOS - snippet will be added soon\n\n## License\n\nLicensed under the MIT License.\nCopyright (c) 2018 Rafal Rajtar\n",
    "longname": "/Users/rafal/Desktop/Projects/airr-react/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"airr-react\",\n\t\"version\": \"2.0.9\",\n\t\"description\": \"Reusable React components for building Single Page Apps.\",\n\t\"dependencies\": {\n\t\t\"immutability-helper\": \"^2.5.0\",\n\t\t\"prop-types\": \"^15.6.0\",\n\t\t\"react\": \"^16.1.1\"\n\t},\n\t\"main\": \"airr-react.js\",\n\t\"scripts\": {\n\t\t\"build\": \"babel lib -d dist --copy-files --ignore '*.mkd'\"\n\t},\n\t\"keywords\": [\n\t\t\"react\",\n\t\t\"react-components\",\n\t\t\"SPA\",\n\t\t\"PWA\",\n\t\t\"mobile\",\n\t\t\"hybrid\",\n\t\t\"cordova\",\n\t\t\"phonegap\"\n\t],\n\t\"author\": \"Rafal Rajtar\",\n\t\"license\": \"MIT\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/rafal-r/airr-react\"\n\t},\n\t\"devDependencies\": {\n\t\t\"babel-cli\": \"^6.26.0\",\n\t\t\"babel-core\": \"^6.26.0\",\n\t\t\"babel-preset-env\": \"^1.7.0\",\n\t\t\"babel-preset-react\": \"^6.24.1\",\n\t\t\"babel-preset-stage-2\": \"^6.24.1\",\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n\t\t\"esdoc-jsx-plugin\": \"^1.0.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\"\n\t}\n}\n",
    "longname": "/Users/rafal/Desktop/Projects/airr-react/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]